
CommucationOverCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007a8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080008d8  080008d8  000108d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000938  08000938  00010940  2**0
                  CONTENTS
  4 .ARM          00000000  08000938  08000938  00010940  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000938  08000940  00010940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000938  08000938  00010938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800093c  0800093c  0001093c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  08000940  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000940  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010940  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000263c  00000000  00000000  00010969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000967  00000000  00000000  00012fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000368  00000000  00000000  00013910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d8  00000000  00000000  00013c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001169  00000000  00000000  00013f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b40  00000000  00000000  000150b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000546b  00000000  00000000  00016bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0001c064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c2c  00000000  00000000  0001c0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080008c0 	.word	0x080008c0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080008c0 	.word	0x080008c0

08000170 <CommApp_voidInit>:
#include "CmmunicationOverCAN_PRIV.h"
#include "CmmunicationOverCAN_INTRF.h"

volatile static u8 Global_UartDataRecive;

void CommApp_voidInit(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	Global_UartDataRecive = 0;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <CommApp_voidInit+0x50>)
 8000176:	2200      	movs	r2, #0
 8000178:	701a      	strb	r2, [r3, #0]
	//RCC init clk HSE
	RCC_voidInitSystemClock();
 800017a:	f000 f997 	bl	80004ac <RCC_voidInitSystemClock>
	//Enable RCC For GPIO , UART1 and CAN
	RCC_voidEnablePeriphralCLK(APB2_IOPAEN);
 800017e:	20ca      	movs	r0, #202	; 0xca
 8000180:	f000 f9a2 	bl	80004c8 <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPBEN);
 8000184:	20cb      	movs	r0, #203	; 0xcb
 8000186:	f000 f99f 	bl	80004c8 <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPCEN);
 800018a:	20cc      	movs	r0, #204	; 0xcc
 800018c:	f000 f99c 	bl	80004c8 <RCC_voidEnablePeriphralCLK>

	RCC_voidEnablePeriphralCLK(APB2_USART1EN);
 8000190:	20d6      	movs	r0, #214	; 0xd6
 8000192:	f000 f999 	bl	80004c8 <RCC_voidEnablePeriphralCLK>

	RCC_voidEnablePeriphralCLK(APB1_USART2EN);
 8000196:	f240 103d 	movw	r0, #317	; 0x13d
 800019a:	f000 f995 	bl	80004c8 <RCC_voidEnablePeriphralCLK>

	//RCC_voidEnablePeriphralCLK(APB1_CANEN);

	// NVIC Enable UART interrupt
	NVIC_u8Set_EN_IRQ(INTERRUPT_USART1);
 800019e:	2025      	movs	r0, #37	; 0x25
 80001a0:	f000 f960 	bl	8000464 <NVIC_u8Set_EN_IRQ>

	//init  GPIO
	GPIO_u8Init();
 80001a4:	f000 f860 	bl	8000268 <GPIO_u8Init>

	//init  UART1
	UART1_voidInit();
 80001a8:	f000 fa28 	bl	80005fc <UART1_voidInit>
	UART1_u8EnterruptCallBackRX(CommApp_voidUart_ISRFunction);
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <CommApp_voidInit+0x54>)
 80001ae:	f000 fa87 	bl	80006c0 <UART1_u8EnterruptCallBackRX>
	UART1_u8EnterruptEnRX();
 80001b2:	f000 fa71 	bl	8000698 <UART1_u8EnterruptEnRX>

	//init  UART2  for testing
	UART2_voidInit();
 80001b6:	f000 fab7 	bl	8000728 <UART2_voidInit>


}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08000255 	.word	0x08000255

080001c8 <CommApp_voidRunnable>:

void CommApp_voidRunnable(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	if (CommApp_enuSerialDataCheck() == COM_TRUE) {
 80001cc:	f000 f80c 	bl	80001e8 <CommApp_enuSerialDataCheck>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d105      	bne.n	80001e2 <CommApp_voidRunnable+0x1a>

	CommApp_enuDataSend(CommApp_voidReadClearUartVar());
 80001d6:	f000 f82b 	bl	8000230 <CommApp_voidReadClearUartVar>
 80001da:	4603      	mov	r3, r0
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 f817 	bl	8000210 <CommApp_enuDataSend>

	} else {
		// do nothing for now
	}
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
	...

080001e8 <CommApp_enuSerialDataCheck>:

CommAppError_t CommApp_enuSerialDataCheck() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	CommAppError_t Local_enuErorr = COM_TRUE;
 80001ee:	2300      	movs	r3, #0
 80001f0:	71fb      	strb	r3, [r7, #7]
	if (Global_UartDataRecive == 0) {
 80001f2:	4b06      	ldr	r3, [pc, #24]	; (800020c <CommApp_enuSerialDataCheck+0x24>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d101      	bne.n	8000200 <CommApp_enuSerialDataCheck+0x18>
		Local_enuErorr =COM_FALSE;
 80001fc:	2301      	movs	r3, #1
 80001fe:	71fb      	strb	r3, [r7, #7]
	} else {
		// do nothing
	}
	return Local_enuErorr;
 8000200:	79fb      	ldrb	r3, [r7, #7]
}
 8000202:	4618      	mov	r0, r3
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000001c 	.word	0x2000001c

08000210 <CommApp_enuDataSend>:
CommAppError_t CommApp_enuDataSend(u8 Copy_u8DataSend) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
	CommAppError_t Local_enuErorr = COM_TRUE;
 800021a:	2300      	movs	r3, #0
 800021c:	73fb      	strb	r3, [r7, #15]

	UART2_u8SendByteBusyw8(Copy_u8DataSend);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fabb 	bl	800079c <UART2_u8SendByteBusyw8>

	return Local_enuErorr;
 8000226:	7bfb      	ldrb	r3, [r7, #15]
}
 8000228:	4618      	mov	r0, r3
 800022a:	3710      	adds	r7, #16
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <CommApp_voidReadClearUartVar>:
	Global_UartDataRecive = 0 ;
}
u8 CommApp_voidReadUartVar(){
	return Global_UartDataRecive;
}
u8 CommApp_voidReadClearUartVar(){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
	u8 local_temp = Global_UartDataRecive ;
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CommApp_voidReadClearUartVar+0x20>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	71fb      	strb	r3, [r7, #7]
	Global_UartDataRecive = 0 ;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <CommApp_voidReadClearUartVar+0x20>)
 800023e:	2200      	movs	r2, #0
 8000240:	701a      	strb	r2, [r3, #0]
	return local_temp;
 8000242:	79fb      	ldrb	r3, [r7, #7]
}
 8000244:	4618      	mov	r0, r3
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	2000001c 	.word	0x2000001c

08000254 <CommApp_voidUart_ISRFunction>:

void CommApp_voidUart_ISRFunction() {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	UART1_u8RecieveByte(&Global_UartDataRecive);
 8000258:	4802      	ldr	r0, [pc, #8]	; (8000264 <CommApp_voidUart_ISRFunction+0x10>)
 800025a:	f000 fa09 	bl	8000670 <UART1_u8RecieveByte>
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	2000001c 	.word	0x2000001c

08000268 <GPIO_u8Init>:
#include "GPIO_Private.h"
#include "GPIO_Interface.h"

extern GPIO_Conf_t GPIO_Conf_ARR[PINTOTAL];

Error_t GPIO_u8Init() {
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0

	for (u8 index = 0; index < PINTOTAL; index++) {
 800026e:	2300      	movs	r3, #0
 8000270:	71fb      	strb	r3, [r7, #7]
 8000272:	e00f      	b.n	8000294 <GPIO_u8Init+0x2c>
		GPIO_u8SetPinD_ID(GPIO_Conf_ARR[index].GPIO_u8_pin,
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <GPIO_u8Init+0x3c>)
 8000278:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4909      	ldr	r1, [pc, #36]	; (80002a4 <GPIO_u8Init+0x3c>)
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	440b      	add	r3, r1
 8000284:	785b      	ldrb	r3, [r3, #1]
 8000286:	4619      	mov	r1, r3
 8000288:	4610      	mov	r0, r2
 800028a:	f000 f80d 	bl	80002a8 <GPIO_u8SetPinD_ID>
	for (u8 index = 0; index < PINTOTAL; index++) {
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	3301      	adds	r3, #1
 8000292:	71fb      	strb	r3, [r7, #7]
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	2b2f      	cmp	r3, #47	; 0x2f
 8000298:	d9ec      	bls.n	8000274 <GPIO_u8Init+0xc>
				GPIO_Conf_ARR[index].GPIO_u8_Mode);
	}
	return OK;
 800029a:	2300      	movs	r3, #0
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	080008d8 	.word	0x080008d8

080002a8 <GPIO_u8SetPinD_ID>:
		local_state = NOK;
		break;
	}
	return local_state;
}
Error_t GPIO_u8SetPinD_ID(GPIO_u8PIN_t Copy_u8PinId, u8 Copy_u8Mode) {
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	460a      	mov	r2, r1
 80002b2:	71fb      	strb	r3, [r7, #7]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71bb      	strb	r3, [r7, #6]
	u8 local_port = (Copy_u8PinId / GPIO_u8R_PINS) + 1;
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	091b      	lsrs	r3, r3, #4
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	3301      	adds	r3, #1
 80002c0:	73bb      	strb	r3, [r7, #14]
	u8 local_pin = Copy_u8PinId % GPIO_u8R_PINS;
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 030f 	and.w	r3, r3, #15
 80002c8:	737b      	strb	r3, [r7, #13]
	Error_t local_state = OK;
 80002ca:	2300      	movs	r3, #0
 80002cc:	73fb      	strb	r3, [r7, #15]
	switch (local_port) {
 80002ce:	7bbb      	ldrb	r3, [r7, #14]
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d07d      	beq.n	80003d0 <GPIO_u8SetPinD_ID+0x128>
 80002d4:	2b03      	cmp	r3, #3
 80002d6:	f300 80b6 	bgt.w	8000446 <GPIO_u8SetPinD_ID+0x19e>
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d002      	beq.n	80002e4 <GPIO_u8SetPinD_ID+0x3c>
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d03b      	beq.n	800035a <GPIO_u8SetPinD_ID+0xb2>
 80002e2:	e0b0      	b.n	8000446 <GPIO_u8SetPinD_ID+0x19e>
	case GPIO_PORTA:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 80002e4:	7b7b      	ldrb	r3, [r7, #13]
 80002e6:	2b07      	cmp	r3, #7
 80002e8:	d817      	bhi.n	800031a <GPIO_u8SetPinD_ID+0x72>
			GPIO_A->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 80002ea:	4b5b      	ldr	r3, [pc, #364]	; (8000458 <GPIO_u8SetPinD_ID+0x1b0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 80002ee:	7b7a      	ldrb	r2, [r7, #13]
 80002f0:	0092      	lsls	r2, r2, #2
 80002f2:	210f      	movs	r1, #15
 80002f4:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_A->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	4611      	mov	r1, r2
 80002fc:	4a56      	ldr	r2, [pc, #344]	; (8000458 <GPIO_u8SetPinD_ID+0x1b0>)
 80002fe:	400b      	ands	r3, r1
 8000300:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRL |= ((Copy_u8Mode)
 8000302:	4b55      	ldr	r3, [pc, #340]	; (8000458 <GPIO_u8SetPinD_ID+0x1b0>)
 8000304:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000306:	79b9      	ldrb	r1, [r7, #6]
 8000308:	7b7a      	ldrb	r2, [r7, #13]
 800030a:	0092      	lsls	r2, r2, #2
 800030c:	fa01 f202 	lsl.w	r2, r1, r2
 8000310:	4611      	mov	r1, r2
			GPIO_A->GPIO_CRL |= ((Copy_u8Mode)
 8000312:	4a51      	ldr	r2, [pc, #324]	; (8000458 <GPIO_u8SetPinD_ID+0x1b0>)
 8000314:	430b      	orrs	r3, r1
 8000316:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 8000318:	e098      	b.n	800044c <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 800031a:	7b7b      	ldrb	r3, [r7, #13]
 800031c:	2b0f      	cmp	r3, #15
 800031e:	d819      	bhi.n	8000354 <GPIO_u8SetPinD_ID+0xac>
			GPIO_A->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000320:	4b4d      	ldr	r3, [pc, #308]	; (8000458 <GPIO_u8SetPinD_ID+0x1b0>)
 8000322:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000324:	7b7a      	ldrb	r2, [r7, #13]
 8000326:	3a08      	subs	r2, #8
 8000328:	0092      	lsls	r2, r2, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_A->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000330:	43d2      	mvns	r2, r2
 8000332:	4611      	mov	r1, r2
 8000334:	4a48      	ldr	r2, [pc, #288]	; (8000458 <GPIO_u8SetPinD_ID+0x1b0>)
 8000336:	400b      	ands	r3, r1
 8000338:	6053      	str	r3, [r2, #4]
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
 800033a:	4b47      	ldr	r3, [pc, #284]	; (8000458 <GPIO_u8SetPinD_ID+0x1b0>)
 800033c:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 800033e:	79b9      	ldrb	r1, [r7, #6]
 8000340:	7b7a      	ldrb	r2, [r7, #13]
 8000342:	3a08      	subs	r2, #8
 8000344:	0092      	lsls	r2, r2, #2
 8000346:	fa01 f202 	lsl.w	r2, r1, r2
 800034a:	4611      	mov	r1, r2
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
 800034c:	4a42      	ldr	r2, [pc, #264]	; (8000458 <GPIO_u8SetPinD_ID+0x1b0>)
 800034e:	430b      	orrs	r3, r1
 8000350:	6053      	str	r3, [r2, #4]
		break;
 8000352:	e07b      	b.n	800044c <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 8000354:	2301      	movs	r3, #1
 8000356:	73fb      	strb	r3, [r7, #15]
		break;
 8000358:	e078      	b.n	800044c <GPIO_u8SetPinD_ID+0x1a4>
	case GPIO_PORTB:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	2b07      	cmp	r3, #7
 800035e:	d817      	bhi.n	8000390 <GPIO_u8SetPinD_ID+0xe8>
			GPIO_B->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000360:	4b3e      	ldr	r3, [pc, #248]	; (800045c <GPIO_u8SetPinD_ID+0x1b4>)
 8000362:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000364:	7b7a      	ldrb	r2, [r7, #13]
 8000366:	0092      	lsls	r2, r2, #2
 8000368:	210f      	movs	r1, #15
 800036a:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_B->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 800036e:	43d2      	mvns	r2, r2
 8000370:	4611      	mov	r1, r2
 8000372:	4a3a      	ldr	r2, [pc, #232]	; (800045c <GPIO_u8SetPinD_ID+0x1b4>)
 8000374:	400b      	ands	r3, r1
 8000376:	6013      	str	r3, [r2, #0]
			GPIO_B->GPIO_CRL |= ((Copy_u8Mode)
 8000378:	4b38      	ldr	r3, [pc, #224]	; (800045c <GPIO_u8SetPinD_ID+0x1b4>)
 800037a:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 800037c:	79b9      	ldrb	r1, [r7, #6]
 800037e:	7b7a      	ldrb	r2, [r7, #13]
 8000380:	0092      	lsls	r2, r2, #2
 8000382:	fa01 f202 	lsl.w	r2, r1, r2
 8000386:	4611      	mov	r1, r2
			GPIO_B->GPIO_CRL |= ((Copy_u8Mode)
 8000388:	4a34      	ldr	r2, [pc, #208]	; (800045c <GPIO_u8SetPinD_ID+0x1b4>)
 800038a:	430b      	orrs	r3, r1
 800038c:	6013      	str	r3, [r2, #0]
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 800038e:	e05d      	b.n	800044c <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 8000390:	7b7b      	ldrb	r3, [r7, #13]
 8000392:	2b0f      	cmp	r3, #15
 8000394:	d819      	bhi.n	80003ca <GPIO_u8SetPinD_ID+0x122>
			GPIO_B->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000396:	4b31      	ldr	r3, [pc, #196]	; (800045c <GPIO_u8SetPinD_ID+0x1b4>)
 8000398:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 800039a:	7b7a      	ldrb	r2, [r7, #13]
 800039c:	3a08      	subs	r2, #8
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	210f      	movs	r1, #15
 80003a2:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_B->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 80003a6:	43d2      	mvns	r2, r2
 80003a8:	4611      	mov	r1, r2
 80003aa:	4a2c      	ldr	r2, [pc, #176]	; (800045c <GPIO_u8SetPinD_ID+0x1b4>)
 80003ac:	400b      	ands	r3, r1
 80003ae:	6053      	str	r3, [r2, #4]
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
 80003b0:	4b2a      	ldr	r3, [pc, #168]	; (800045c <GPIO_u8SetPinD_ID+0x1b4>)
 80003b2:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 80003b4:	79b9      	ldrb	r1, [r7, #6]
 80003b6:	7b7a      	ldrb	r2, [r7, #13]
 80003b8:	3a08      	subs	r2, #8
 80003ba:	0092      	lsls	r2, r2, #2
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	4611      	mov	r1, r2
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
 80003c2:	4a26      	ldr	r2, [pc, #152]	; (800045c <GPIO_u8SetPinD_ID+0x1b4>)
 80003c4:	430b      	orrs	r3, r1
 80003c6:	6053      	str	r3, [r2, #4]
		break;
 80003c8:	e040      	b.n	800044c <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 80003ca:	2301      	movs	r3, #1
 80003cc:	73fb      	strb	r3, [r7, #15]
		break;
 80003ce:	e03d      	b.n	800044c <GPIO_u8SetPinD_ID+0x1a4>
	case GPIO_PORTC:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 80003d0:	7b7b      	ldrb	r3, [r7, #13]
 80003d2:	2b07      	cmp	r3, #7
 80003d4:	d817      	bhi.n	8000406 <GPIO_u8SetPinD_ID+0x15e>
			GPIO_C->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 80003d6:	4b22      	ldr	r3, [pc, #136]	; (8000460 <GPIO_u8SetPinD_ID+0x1b8>)
 80003d8:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 80003da:	7b7a      	ldrb	r2, [r7, #13]
 80003dc:	0092      	lsls	r2, r2, #2
 80003de:	210f      	movs	r1, #15
 80003e0:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_C->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 80003e4:	43d2      	mvns	r2, r2
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a1d      	ldr	r2, [pc, #116]	; (8000460 <GPIO_u8SetPinD_ID+0x1b8>)
 80003ea:	400b      	ands	r3, r1
 80003ec:	6013      	str	r3, [r2, #0]
			GPIO_C->GPIO_CRL |= ((Copy_u8Mode)
 80003ee:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <GPIO_u8SetPinD_ID+0x1b8>)
 80003f0:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 80003f2:	79b9      	ldrb	r1, [r7, #6]
 80003f4:	7b7a      	ldrb	r2, [r7, #13]
 80003f6:	0092      	lsls	r2, r2, #2
 80003f8:	fa01 f202 	lsl.w	r2, r1, r2
 80003fc:	4611      	mov	r1, r2
			GPIO_C->GPIO_CRL |= ((Copy_u8Mode)
 80003fe:	4a18      	ldr	r2, [pc, #96]	; (8000460 <GPIO_u8SetPinD_ID+0x1b8>)
 8000400:	430b      	orrs	r3, r1
 8000402:	6013      	str	r3, [r2, #0]
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 8000404:	e022      	b.n	800044c <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 8000406:	7b7b      	ldrb	r3, [r7, #13]
 8000408:	2b0f      	cmp	r3, #15
 800040a:	d819      	bhi.n	8000440 <GPIO_u8SetPinD_ID+0x198>
			GPIO_C->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <GPIO_u8SetPinD_ID+0x1b8>)
 800040e:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000410:	7b7a      	ldrb	r2, [r7, #13]
 8000412:	3a08      	subs	r2, #8
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	210f      	movs	r1, #15
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_C->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 800041c:	43d2      	mvns	r2, r2
 800041e:	4611      	mov	r1, r2
 8000420:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <GPIO_u8SetPinD_ID+0x1b8>)
 8000422:	400b      	ands	r3, r1
 8000424:	6053      	str	r3, [r2, #4]
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <GPIO_u8SetPinD_ID+0x1b8>)
 8000428:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 800042a:	79b9      	ldrb	r1, [r7, #6]
 800042c:	7b7a      	ldrb	r2, [r7, #13]
 800042e:	3a08      	subs	r2, #8
 8000430:	0092      	lsls	r2, r2, #2
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	4611      	mov	r1, r2
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <GPIO_u8SetPinD_ID+0x1b8>)
 800043a:	430b      	orrs	r3, r1
 800043c:	6053      	str	r3, [r2, #4]
		break;
 800043e:	e005      	b.n	800044c <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 8000440:	2301      	movs	r3, #1
 8000442:	73fb      	strb	r3, [r7, #15]
		break;
 8000444:	e002      	b.n	800044c <GPIO_u8SetPinD_ID+0x1a4>
	default:
		local_state = NOK;
 8000446:	2301      	movs	r3, #1
 8000448:	73fb      	strb	r3, [r7, #15]
		break;
 800044a:	bf00      	nop
	}

	return local_state;
 800044c:	7bfb      	ldrb	r3, [r7, #15]
}
 800044e:	4618      	mov	r0, r3
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40010800 	.word	0x40010800
 800045c:	40010c00 	.word	0x40010c00
 8000460:	40011000 	.word	0x40011000

08000464 <NVIC_u8Set_EN_IRQ>:
	SCB->AIRCR = NVIC_PR_OPTIONS;

	return OK;
}

Error_t NVIC_u8Set_EN_IRQ(NVIC_Prority_t Copy_IRQ_ID) {
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	Error_t Copy_status = OK;
 800046e:	2300      	movs	r3, #0
 8000470:	73fb      	strb	r3, [r7, #15]
	u8 Copy_ID_Index = Copy_IRQ_ID / NVIC_REG_SIZE;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	095b      	lsrs	r3, r3, #5
 8000476:	73bb      	strb	r3, [r7, #14]
	if (Copy_IRQ_ID < INTERRUPT_TOTAL) {
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2b3b      	cmp	r3, #59	; 0x3b
 800047c:	d80c      	bhi.n	8000498 <NVIC_u8Set_EN_IRQ+0x34>
		Copy_IRQ_ID = Copy_IRQ_ID % NVIC_REG_SIZE;
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	f003 031f 	and.w	r3, r3, #31
 8000484:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[Copy_ID_Index] = 1 << Copy_IRQ_ID;
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2201      	movs	r2, #1
 800048a:	fa02 f103 	lsl.w	r1, r2, r3
 800048e:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <NVIC_u8Set_EN_IRQ+0x44>)
 8000490:	7bbb      	ldrb	r3, [r7, #14]
 8000492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000496:	e001      	b.n	800049c <NVIC_u8Set_EN_IRQ+0x38>
	} else {
		Copy_status = NOK;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]
	}
	return Copy_status;
 800049c:	7bfb      	ldrb	r3, [r7, #15]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr
 80004a8:	e000e100 	.word	0xe000e100

080004ac <RCC_voidInitSystemClock>:
#include "RCC_Private.h"
#include "RCC_CONF.h"
#include "RCC_Interface.h"

void RCC_voidInitSystemClock(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
#if RCC_u8CLK_TYPE==RCC_u8HSE_CRYSTAL
	RCC->RCC_CR=0x00010080;
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <RCC_voidInitSystemClock+0x14>)
 80004b2:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <RCC_voidInitSystemClock+0x18>)
 80004b4:	601a      	str	r2, [r3, #0]
	RCC->RCC_CR = 0x00010080;
#else
	#error("You choosed wrong Clock Type")
#endif

}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	00010080 	.word	0x00010080

080004c8 <RCC_voidEnablePeriphralCLK>:

Error_t RCC_voidEnablePeriphralCLK(PeriphralBusId_t Copy_enPeriphralId)
{	
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8BusID =Copy_enPeriphralId/100;
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	4a25      	ldr	r2, [pc, #148]	; (800056c <RCC_voidEnablePeriphralCLK+0xa4>)
 80004d6:	fba2 2303 	umull	r2, r3, r2, r3
 80004da:	095b      	lsrs	r3, r3, #5
 80004dc:	b29b      	uxth	r3, r3
 80004de:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8PeriphralID =Copy_enPeriphralId % 100;
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	4a22      	ldr	r2, [pc, #136]	; (800056c <RCC_voidEnablePeriphralCLK+0xa4>)
 80004e4:	fba2 1203 	umull	r1, r2, r2, r3
 80004e8:	0952      	lsrs	r2, r2, #5
 80004ea:	2164      	movs	r1, #100	; 0x64
 80004ec:	fb01 f202 	mul.w	r2, r1, r2
 80004f0:	1a9b      	subs	r3, r3, r2
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	737b      	strb	r3, [r7, #13]

	Error_t Local_enErrorState=OK;
 80004f6:	2300      	movs	r3, #0
 80004f8:	73fb      	strb	r3, [r7, #15]

	if(Local_u8PeriphralID  <= 31) //unsigned
 80004fa:	7b7b      	ldrb	r3, [r7, #13]
 80004fc:	2b1f      	cmp	r3, #31
 80004fe:	d82d      	bhi.n	800055c <RCC_voidEnablePeriphralCLK+0x94>
	{
		switch(Local_u8BusID)
 8000500:	7bbb      	ldrb	r3, [r7, #14]
 8000502:	2b03      	cmp	r3, #3
 8000504:	d01c      	beq.n	8000540 <RCC_voidEnablePeriphralCLK+0x78>
 8000506:	2b03      	cmp	r3, #3
 8000508:	dc25      	bgt.n	8000556 <RCC_voidEnablePeriphralCLK+0x8e>
 800050a:	2b01      	cmp	r3, #1
 800050c:	d002      	beq.n	8000514 <RCC_voidEnablePeriphralCLK+0x4c>
 800050e:	2b02      	cmp	r3, #2
 8000510:	d00b      	beq.n	800052a <RCC_voidEnablePeriphralCLK+0x62>
 8000512:	e020      	b.n	8000556 <RCC_voidEnablePeriphralCLK+0x8e>
		{
		case RCC_u8AHB: SET_BIT(RCC->RCC_AHBENR,Local_u8PeriphralID) ;    	
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	7b7a      	ldrb	r2, [r7, #13]
 800051a:	2101      	movs	r1, #1
 800051c:	fa01 f202 	lsl.w	r2, r1, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a13      	ldr	r2, [pc, #76]	; (8000570 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000524:	430b      	orrs	r3, r1
 8000526:	6153      	str	r3, [r2, #20]
			break;
 8000528:	e01a      	b.n	8000560 <RCC_voidEnablePeriphralCLK+0x98>

		case RCC_u8APB2:SET_BIT(RCC->RCC_APB2ENR,Local_u8PeriphralID) ;	
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <RCC_voidEnablePeriphralCLK+0xa8>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	7b7a      	ldrb	r2, [r7, #13]
 8000530:	2101      	movs	r1, #1
 8000532:	fa01 f202 	lsl.w	r2, r1, r2
 8000536:	4611      	mov	r1, r2
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <RCC_voidEnablePeriphralCLK+0xa8>)
 800053a:	430b      	orrs	r3, r1
 800053c:	6193      	str	r3, [r2, #24]
			break;
 800053e:	e00f      	b.n	8000560 <RCC_voidEnablePeriphralCLK+0x98>

		case RCC_u8APB1: SET_BIT(RCC->RCC_APB1ENR,Local_u8PeriphralID) ;	
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000542:	69db      	ldr	r3, [r3, #28]
 8000544:	7b7a      	ldrb	r2, [r7, #13]
 8000546:	2101      	movs	r1, #1
 8000548:	fa01 f202 	lsl.w	r2, r1, r2
 800054c:	4611      	mov	r1, r2
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <RCC_voidEnablePeriphralCLK+0xa8>)
 8000550:	430b      	orrs	r3, r1
 8000552:	61d3      	str	r3, [r2, #28]
			break;
 8000554:	e004      	b.n	8000560 <RCC_voidEnablePeriphralCLK+0x98>
			
			
			
		default:
			Local_enErrorState=NOK;
 8000556:	2301      	movs	r3, #1
 8000558:	73fb      	strb	r3, [r7, #15]
			break;
 800055a:	e001      	b.n	8000560 <RCC_voidEnablePeriphralCLK+0x98>
		}

	}
	else
	{
		Local_enErrorState=NOK;
 800055c:	2301      	movs	r3, #1
 800055e:	73fb      	strb	r3, [r7, #15]

	}

	return Local_enErrorState;
 8000560:	7bfb      	ldrb	r3, [r7, #15]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	51eb851f 	.word	0x51eb851f
 8000570:	40021000 	.word	0x40021000

08000574 <STK_u8StopTimer>:
	}

	// return
	return local_u8status;
}
Error_t STK_u8StopTimer() {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	// set loud and value with zeroxs
	Error_t local_u8status = OK;
 800057a:	2300      	movs	r3, #0
 800057c:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(SYSTICK->STK_CTRL, 0);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <STK_u8StopTimer+0x30>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a08      	ldr	r2, [pc, #32]	; (80005a4 <STK_u8StopTimer+0x30>)
 8000584:	f023 0301 	bic.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]
	SYSTICK->STK_LOAD = 0;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <STK_u8StopTimer+0x30>)
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
	SYSTICK->STK_VAL = 0;
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <STK_u8StopTimer+0x30>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
	STK_u8DSInterrupt();
 8000596:	f000 f807 	bl	80005a8 <STK_u8DSInterrupt>

	return local_u8status;
 800059a:	79fb      	ldrb	r3, [r7, #7]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	e000e010 	.word	0xe000e010

080005a8 <STK_u8DSInterrupt>:
Error_t STK_u8ENInterrupt() {
	SET_BIT(SYSTICK->STK_CTRL, 1);
	return OK;

}
Error_t STK_u8DSInterrupt() {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	CLR_BIT(SYSTICK->STK_CTRL, 1);
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <STK_u8DSInterrupt+0x1c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <STK_u8DSInterrupt+0x1c>)
 80005b2:	f023 0302 	bic.w	r3, r3, #2
 80005b6:	6013      	str	r3, [r2, #0]
	return OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e010 	.word	0xe000e010

080005c8 <SysTick_Handler>:
	} else {
		local_u8status = NOK;
	}
	return local_u8status;
}
void SysTick_Handler() {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

	if (STK_CHAECK_PERODIC == 1) {
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SysTick_Handler+0x28>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d107      	bne.n	80005e4 <SysTick_Handler+0x1c>
		STK_u8StopTimer();
 80005d4:	f7ff ffce 	bl	8000574 <STK_u8StopTimer>
		STK_CHAECK_PERODIC = 0;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <SysTick_Handler+0x28>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
		STK_ProtectionFlage = 0;
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <SysTick_Handler+0x2c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	} else {
		// do nothing
	}
	STK_PtrCallBack();
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SysTick_Handler+0x30>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4798      	blx	r3

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000024 	.word	0x20000024
 80005f4:	20000025 	.word	0x20000025
 80005f8:	20000020 	.word	0x20000020

080005fc <UART1_voidInit>:
/*
 void (*UART1_CallBack[UART_CALLBACK_SIZE])(void) =
 {	NULLPTR, NULLPTR,NULLPTR,NULLPTR };
 */

void UART1_voidInit() {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

	/******** baud rate **********/
	UART1->USART_BRR = BAUDRATE;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <UART1_voidInit+0x70>)
 8000602:	f240 3241 	movw	r2, #833	; 0x341
 8000606:	609a      	str	r2, [r3, #8]

	/******** frame format *******/
//no parity
	CLR_BIT(UART1->USART_CR1, PCE);
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <UART1_voidInit+0x70>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a17      	ldr	r2, [pc, #92]	; (800066c <UART1_voidInit+0x70>)
 800060e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000612:	60d3      	str	r3, [r2, #12]
// 1 start 8bit data n stop
	CLR_BIT(UART1->USART_CR1, M);
 8000614:	4b15      	ldr	r3, [pc, #84]	; (800066c <UART1_voidInit+0x70>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4a14      	ldr	r2, [pc, #80]	; (800066c <UART1_voidInit+0x70>)
 800061a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800061e:	60d3      	str	r3, [r2, #12]
// 1 stop bit
	CLR_BIT(UART1->USART_CR2, StOP_0);
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <UART1_voidInit+0x70>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4a11      	ldr	r2, [pc, #68]	; (800066c <UART1_voidInit+0x70>)
 8000626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800062a:	6113      	str	r3, [r2, #16]
	CLR_BIT(UART1->USART_CR2, StOP_1);
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <UART1_voidInit+0x70>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <UART1_voidInit+0x70>)
 8000632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000636:	6113      	str	r3, [r2, #16]

	/******** enable RX **********/
	SET_BIT(UART1->USART_CR1, RE);
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <UART1_voidInit+0x70>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <UART1_voidInit+0x70>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	60d3      	str	r3, [r2, #12]
	/******** enable TX **********/
	SET_BIT(UART1->USART_CR1, TE);
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <UART1_voidInit+0x70>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	4a08      	ldr	r2, [pc, #32]	; (800066c <UART1_voidInit+0x70>)
 800064a:	f043 0308 	orr.w	r3, r3, #8
 800064e:	60d3      	str	r3, [r2, #12]
	/*********UART enable ********/
	SET_BIT(UART1->USART_CR1, UE);
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <UART1_voidInit+0x70>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a05      	ldr	r2, [pc, #20]	; (800066c <UART1_voidInit+0x70>)
 8000656:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800065a:	60d3      	str	r3, [r2, #12]
	// clr status reg
	UART1->USART_SR = 0;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <UART1_voidInit+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40013800 	.word	0x40013800

08000670 <UART1_u8RecieveByte>:

	return local_u8Status;

}

Error_t UART1_u8RecieveByte(volatile u8 *data) {
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]
// return DR reg
	*data = UART1->USART_DR;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <UART1_u8RecieveByte+0x24>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	701a      	strb	r2, [r3, #0]
	return local_u8Status;
 8000686:	7bfb      	ldrb	r3, [r7, #15]

}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	bc80      	pop	{r7}
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40013800 	.word	0x40013800

08000698 <UART1_u8EnterruptEnRX>:
	UART1_MUNRX = 0;
	UART1_DataReady = 0;
}

Error_t UART1_u8RecieveStringBusyW8(u8 *data);
Error_t UART1_u8EnterruptEnRX(void) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
	Error_t local_u8Status = OK;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
	SET_BIT(UART1->USART_CR1, RXNEIE);
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <UART1_u8EnterruptEnRX+0x24>)
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <UART1_u8EnterruptEnRX+0x24>)
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	60d3      	str	r3, [r2, #12]
	return local_u8Status;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40013800 	.word	0x40013800

080006c0 <UART1_u8EnterruptCallBackRX>:
Error_t UART1_u8EnterruptDsRX(void) {
	Error_t local_u8Status = OK;
	CLR_BIT(UART1->USART_CR1, RXNEIE);
	return local_u8Status;
}
Error_t UART1_u8EnterruptCallBackRX(void (*Rx)(void)) {
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
	if (Rx != NULLPTR) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d003      	beq.n	80006da <UART1_u8EnterruptCallBackRX+0x1a>
		GlobalRX = Rx;
 80006d2:	4a06      	ldr	r2, [pc, #24]	; (80006ec <UART1_u8EnterruptCallBackRX+0x2c>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	e001      	b.n	80006de <UART1_u8EnterruptCallBackRX+0x1e>
	} else {
		local_u8Status = NULL_PTR;
 80006da:	2303      	movs	r3, #3
 80006dc:	73fb      	strb	r3, [r7, #15]
	}
	return local_u8Status;
 80006de:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028

080006f0 <USART1_IRQHandler>:
	Error_t local_u8Status = OK;

	return local_u8Status;
}

void USART1_IRQHandler(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	 } else {
	 // do nothing
	 }
	 }
	 */
	if (READ_BIT(UART1->USART_SR, RXNE)) {
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <USART1_IRQHandler+0x30>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	095b      	lsrs	r3, r3, #5
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00c      	beq.n	800071c <USART1_IRQHandler+0x2c>
		if (GlobalRX) {
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <USART1_IRQHandler+0x34>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <USART1_IRQHandler+0x20>
			GlobalRX();
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <USART1_IRQHandler+0x34>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4798      	blx	r3

		}
		CLR_BIT(UART1->USART_SR, RXNE);
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <USART1_IRQHandler+0x30>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a02      	ldr	r2, [pc, #8]	; (8000720 <USART1_IRQHandler+0x30>)
 8000716:	f023 0320 	bic.w	r3, r3, #32
 800071a:	6013      	str	r3, [r2, #0]

	}

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40013800 	.word	0x40013800
 8000724:	20000028 	.word	0x20000028

08000728 <UART2_voidInit>:
/*
 void (*UART2_CallBack[UART_CALLBACK_SIZE])(void) =
 {	NULLPTR, NULLPTR,NULLPTR,NULLPTR };
 */

void UART2_voidInit() {
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

	/******** baud rate **********/
	UART2->USART_BRR = BAUDRATE2;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <UART2_voidInit+0x70>)
 800072e:	f240 3241 	movw	r2, #833	; 0x341
 8000732:	609a      	str	r2, [r3, #8]

	/******** frame format *******/
//no parity
	CLR_BIT(UART2->USART_CR1, PCE);
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <UART2_voidInit+0x70>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	4a17      	ldr	r2, [pc, #92]	; (8000798 <UART2_voidInit+0x70>)
 800073a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800073e:	60d3      	str	r3, [r2, #12]
// 1 start 8bit data n stop
	CLR_BIT(UART2->USART_CR1, M);
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <UART2_voidInit+0x70>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	4a14      	ldr	r2, [pc, #80]	; (8000798 <UART2_voidInit+0x70>)
 8000746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800074a:	60d3      	str	r3, [r2, #12]
// 1 stop bit
	CLR_BIT(UART2->USART_CR2, StOP_0);
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <UART2_voidInit+0x70>)
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <UART2_voidInit+0x70>)
 8000752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000756:	6113      	str	r3, [r2, #16]
	CLR_BIT(UART2->USART_CR2, StOP_1);
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <UART2_voidInit+0x70>)
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <UART2_voidInit+0x70>)
 800075e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000762:	6113      	str	r3, [r2, #16]

	/******** enable RX **********/
	SET_BIT(UART2->USART_CR1, RE);
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <UART2_voidInit+0x70>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <UART2_voidInit+0x70>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	60d3      	str	r3, [r2, #12]
	/******** enable TX **********/
	SET_BIT(UART2->USART_CR1, TE);
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <UART2_voidInit+0x70>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <UART2_voidInit+0x70>)
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	60d3      	str	r3, [r2, #12]
	/*********UART enable ********/
	SET_BIT(UART2->USART_CR1, UE);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <UART2_voidInit+0x70>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <UART2_voidInit+0x70>)
 8000782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000786:	60d3      	str	r3, [r2, #12]
	// clr status reg
	UART2->USART_SR = 0;
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <UART2_voidInit+0x70>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	40004400 	.word	0x40004400

0800079c <UART2_u8SendByteBusyw8>:

Error_t UART2_u8SendByteBusyw8(u8 data) {
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	Error_t local_u8Status = OK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	73fb      	strb	r3, [r7, #15]
	while (!READ_BIT(UART2->USART_SR, TXE))
 80007aa:	bf00      	nop
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <UART2_u8SendByteBusyw8+0x3c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	09db      	lsrs	r3, r3, #7
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f8      	beq.n	80007ac <UART2_u8SendByteBusyw8+0x10>
		; // txe ---- time out is needed
	UART2->USART_DR = data;
 80007ba:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <UART2_u8SendByteBusyw8+0x3c>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	6053      	str	r3, [r2, #4]
	CLR_BIT(UART2->USART_SR, TXE);
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <UART2_u8SendByteBusyw8+0x3c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <UART2_u8SendByteBusyw8+0x3c>)
 80007c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007ca:	6013      	str	r3, [r2, #0]
	return local_u8Status;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40004400 	.word	0x40004400

080007dc <USART2_IRQHandler>:
	Error_t local_u8Status = OK;

	return local_u8Status;
}

void USART2_IRQHandler(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	 } else {
	 // do nothing
	 }
	 }
	 */
	if (READ_BIT(UART2->USART_SR, RXNE)) {
 80007e0:	4b0a      	ldr	r3, [pc, #40]	; (800080c <USART2_IRQHandler+0x30>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	095b      	lsrs	r3, r3, #5
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d00c      	beq.n	8000808 <USART2_IRQHandler+0x2c>
		if (GlobalRX_UART2) {
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <USART2_IRQHandler+0x34>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <USART2_IRQHandler+0x20>
			GlobalRX_UART2();
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <USART2_IRQHandler+0x34>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4798      	blx	r3

		}
		CLR_BIT(UART2->USART_SR, RXNE);
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <USART2_IRQHandler+0x30>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a02      	ldr	r2, [pc, #8]	; (800080c <USART2_IRQHandler+0x30>)
 8000802:	f023 0320 	bic.w	r3, r3, #32
 8000806:	6013      	str	r3, [r2, #0]

	}

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40004400 	.word	0x40004400
 8000810:	2000002c 	.word	0x2000002c

08000814 <main>:
/*sw              : Communicatin OVER CAN                                    */
/*****************************************************************************/
#include "STD_TYPES.h"
#include "CmmunicationOverCAN_INTRF.h"

int main() {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	CommApp_voidInit();
 8000818:	f7ff fcaa 	bl	8000170 <CommApp_voidInit>

	while (1) {
		CommApp_voidRunnable();
 800081c:	f7ff fcd4 	bl	80001c8 <CommApp_voidRunnable>
 8000820:	e7fc      	b.n	800081c <main+0x8>
	...

08000824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000826:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000828:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	; (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000852:	f000 f811 	bl	8000878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff ffdd 	bl	8000814 <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   r0, =_estack
 800085c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000868:	08000940 	.word	0x08000940
  ldr r2, =_sbss
 800086c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000870:	20000030 	.word	0x20000030

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <__libc_init_array>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	2600      	movs	r6, #0
 800087c:	4d0c      	ldr	r5, [pc, #48]	; (80008b0 <__libc_init_array+0x38>)
 800087e:	4c0d      	ldr	r4, [pc, #52]	; (80008b4 <__libc_init_array+0x3c>)
 8000880:	1b64      	subs	r4, r4, r5
 8000882:	10a4      	asrs	r4, r4, #2
 8000884:	42a6      	cmp	r6, r4
 8000886:	d109      	bne.n	800089c <__libc_init_array+0x24>
 8000888:	f000 f81a 	bl	80008c0 <_init>
 800088c:	2600      	movs	r6, #0
 800088e:	4d0a      	ldr	r5, [pc, #40]	; (80008b8 <__libc_init_array+0x40>)
 8000890:	4c0a      	ldr	r4, [pc, #40]	; (80008bc <__libc_init_array+0x44>)
 8000892:	1b64      	subs	r4, r4, r5
 8000894:	10a4      	asrs	r4, r4, #2
 8000896:	42a6      	cmp	r6, r4
 8000898:	d105      	bne.n	80008a6 <__libc_init_array+0x2e>
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a0:	4798      	blx	r3
 80008a2:	3601      	adds	r6, #1
 80008a4:	e7ee      	b.n	8000884 <__libc_init_array+0xc>
 80008a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008aa:	4798      	blx	r3
 80008ac:	3601      	adds	r6, #1
 80008ae:	e7f2      	b.n	8000896 <__libc_init_array+0x1e>
 80008b0:	08000938 	.word	0x08000938
 80008b4:	08000938 	.word	0x08000938
 80008b8:	08000938 	.word	0x08000938
 80008bc:	0800093c 	.word	0x0800093c

080008c0 <_init>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	bf00      	nop
 80008c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c6:	bc08      	pop	{r3}
 80008c8:	469e      	mov	lr, r3
 80008ca:	4770      	bx	lr

080008cc <_fini>:
 80008cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ce:	bf00      	nop
 80008d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008d2:	bc08      	pop	{r3}
 80008d4:	469e      	mov	lr, r3
 80008d6:	4770      	bx	lr
