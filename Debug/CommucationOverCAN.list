
CommucationOverCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c30  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08000d60  08000d60  00010d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dc0  08000dc0  00010dc8  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc0  08000dc0  00010dc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc0  08000dc8  00010dc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc0  08000dc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc4  08000dc4  00010dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  08000dc8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000dc8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000391a  00000000  00000000  00010df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d14  00000000  00000000  0001470b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000418  00000000  00000000  00015420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  00015838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002447  00000000  00000000  00015bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002801  00000000  00000000  00017ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a90b  00000000  00000000  0001a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00025103  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ecc  00000000  00000000  00025158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d48 	.word	0x08000d48

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d48 	.word	0x08000d48

08000170 <CommApp_voidInit>:
#include "CmmunicationOverCAN_PRIV.h"
#include "CmmunicationOverCAN_INTRF.h"

volatile static u8 Global_UartDataRecive;

void CommApp_voidInit(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	Global_UartDataRecive = 0;
 8000174:	4b17      	ldr	r3, [pc, #92]	; (80001d4 <CommApp_voidInit+0x64>)
 8000176:	2200      	movs	r2, #0
 8000178:	701a      	strb	r2, [r3, #0]
	//RCC init clk HSE
	RCC_voidInitSystemClock();
 800017a:	f000 fbdb 	bl	8000934 <RCC_voidInitSystemClock>
	//Enable RCC For GPIO , UART1 and CAN
	RCC_voidEnablePeriphralCLK(APB2_IOPAEN);
 800017e:	20ca      	movs	r0, #202	; 0xca
 8000180:	f000 fbe6 	bl	8000950 <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPBEN);
 8000184:	20cb      	movs	r0, #203	; 0xcb
 8000186:	f000 fbe3 	bl	8000950 <RCC_voidEnablePeriphralCLK>
	RCC_voidEnablePeriphralCLK(APB2_IOPCEN);
 800018a:	20cc      	movs	r0, #204	; 0xcc
 800018c:	f000 fbe0 	bl	8000950 <RCC_voidEnablePeriphralCLK>

	RCC_voidEnablePeriphralCLK(APB2_USART1EN);
 8000190:	20d6      	movs	r0, #214	; 0xd6
 8000192:	f000 fbdd 	bl	8000950 <RCC_voidEnablePeriphralCLK>

	RCC_voidEnablePeriphralCLK(APB1_USART2EN);
 8000196:	f240 103d 	movw	r0, #317	; 0x13d
 800019a:	f000 fbd9 	bl	8000950 <RCC_voidEnablePeriphralCLK>

	RCC_voidEnablePeriphralCLK(APB1_CANEN);
 800019e:	f240 1045 	movw	r0, #325	; 0x145
 80001a2:	f000 fbd5 	bl	8000950 <RCC_voidEnablePeriphralCLK>

	// NVIC Enable UART interrupt
	NVIC_u8Set_EN_IRQ(INTERRUPT_USART1);
 80001a6:	2025      	movs	r0, #37	; 0x25
 80001a8:	f000 fba0 	bl	80008ec <NVIC_u8Set_EN_IRQ>

	//init  GPIO
	GPIO_u8Init();
 80001ac:	f000 faa0 	bl	80006f0 <GPIO_u8Init>
	//CAN init
	CAN_voidInit();
 80001b0:	f000 f8bc 	bl	800032c <CAN_voidInit>
	CAN_FilterConfig();
 80001b4:	f000 f840 	bl	8000238 <CAN_FilterConfig>
	CAN_voidStart();
 80001b8:	f000 f9b4 	bl	8000524 <CAN_voidStart>
	//init  UART1
	UART1_voidInit();
 80001bc:	f000 fc62 	bl	8000a84 <UART1_voidInit>
	UART1_u8EnterruptCallBackRX(CommApp_voidUart_ISRFunction);
 80001c0:	4805      	ldr	r0, [pc, #20]	; (80001d8 <CommApp_voidInit+0x68>)
 80001c2:	f000 fcc1 	bl	8000b48 <UART1_u8EnterruptCallBackRX>
	UART1_u8EnterruptEnRX();
 80001c6:	f000 fcab 	bl	8000b20 <UART1_u8EnterruptEnRX>

	//init  UART2  for testing
	UART2_voidInit();
 80001ca:	f000 fcf1 	bl	8000bb0 <UART2_voidInit>

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	2000001c 	.word	0x2000001c
 80001d8:	08000319 	.word	0x08000319

080001dc <CommApp_voidRunnable>:

void CommApp_voidRunnable(void) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0

	if (CommApp_enuSerialDataCheck() == COM_TRUE) {
 80001e0:	f000 f84c 	bl	800027c <CommApp_enuSerialDataCheck>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d105      	bne.n	80001f6 <CommApp_voidRunnable+0x1a>

		CommApp_enuCANSend(CommApp_voidReadClearUartVar());
 80001ea:	f000 f883 	bl	80002f4 <CommApp_voidReadClearUartVar>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 f857 	bl	80002a4 <CommApp_enuCANSend>

	} else {
		// do nothing for now
	}
	if (CommApp_enuCANDataCheck() == COM_TRUE) {
 80001f6:	f000 f80b 	bl	8000210 <CommApp_enuCANDataCheck>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d105      	bne.n	800020c <CommApp_voidRunnable+0x30>

		CommApp_enuCANSend(CommApp_voidReadClearUartVar());
 8000200:	f000 f878 	bl	80002f4 <CommApp_voidReadClearUartVar>
 8000204:	4603      	mov	r3, r0
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f84c 	bl	80002a4 <CommApp_enuCANSend>

	} else {
		// do nothing for now
	}
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}

08000210 <CommApp_enuCANDataCheck>:

CommAppError_t CommApp_enuCANDataCheck() {
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0

	// void CAN_RX(void) ;
	return COM_TRUE;
 8000214:	2300      	movs	r3, #0
}
 8000216:	4618      	mov	r0, r3
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr

0800021e <Std_id_High>:
 }
 void CAN_TX(void) {

 }
 */
u16 Std_id_High(u16 local_u16Std_Id) {
 800021e:	b480      	push	{r7}
 8000220:	b083      	sub	sp, #12
 8000222:	af00      	add	r7, sp, #0
 8000224:	4603      	mov	r3, r0
 8000226:	80fb      	strh	r3, [r7, #6]
	return (local_u16Std_Id << 5);
 8000228:	88fb      	ldrh	r3, [r7, #6]
 800022a:	015b      	lsls	r3, r3, #5
 800022c:	b29b      	uxth	r3, r3
}
 800022e:	4618      	mov	r0, r3
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <CAN_FilterConfig>:
void CAN_FilterConfig(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	; 0x28
 800023c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterInit;
	CAN_FilterInit.FilterActivation = ENABLE;
 800023e:	2301      	movs	r3, #1
 8000240:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterInit.FilterBank = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
	CAN_FilterInit.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
	CAN_FilterInit.FilterIdHigh = Std_id_High(0x65d);
 800024a:	f240 605d 	movw	r0, #1629	; 0x65d
 800024e:	f7ff ffe6 	bl	800021e <Std_id_High>
 8000252:	4603      	mov	r3, r0
 8000254:	607b      	str	r3, [r7, #4]
	CAN_FilterInit.FilterIdLow = 0x0000;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
	CAN_FilterInit.FilterMaskIdHigh = 0x0000;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
	CAN_FilterInit.FilterMaskIdLow = 0x0000;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
	CAN_FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8000262:	2300      	movs	r3, #0
 8000264:	61fb      	str	r3, [r7, #28]
	CAN_FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8000266:	2301      	movs	r3, #1
 8000268:	623b      	str	r3, [r7, #32]

	CAN_voidConfigFilter(&CAN_FilterInit);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f96f 	bl	8000550 <CAN_voidConfigFilter>
}
 8000272:	bf00      	nop
 8000274:	3728      	adds	r7, #40	; 0x28
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <CommApp_enuSerialDataCheck>:
/**************************************************************************************/

CommAppError_t CommApp_enuSerialDataCheck() {
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
	CommAppError_t Local_enuErorr = COM_TRUE;
 8000282:	2300      	movs	r3, #0
 8000284:	71fb      	strb	r3, [r7, #7]
	if (Global_UartDataRecive == 0) {
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <CommApp_enuSerialDataCheck+0x24>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	2b00      	cmp	r3, #0
 800028e:	d101      	bne.n	8000294 <CommApp_enuSerialDataCheck+0x18>
		Local_enuErorr = COM_FALSE;
 8000290:	2301      	movs	r3, #1
 8000292:	71fb      	strb	r3, [r7, #7]
	} else {
		// do nothing
	}
	return Local_enuErorr;
 8000294:	79fb      	ldrb	r3, [r7, #7]
}
 8000296:	4618      	mov	r0, r3
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <CommApp_enuCANSend>:
CommAppError_t CommApp_enuCANSend(u8 Copy_u8DataSend) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b08a      	sub	sp, #40	; 0x28
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	CommAppError_t Local_enuErorr = COM_TRUE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
//for testing
	UART2_u8SendByteBusyw8(Copy_u8DataSend);
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fcb4 	bl	8000c24 <UART2_u8SendByteBusyw8>
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = 0x65d;
 80002bc:	f240 635d 	movw	r3, #1629	; 0x65d
 80002c0:	60fb      	str	r3, [r7, #12]
	tx_header.IDE = CAN_ID_STD;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
	tx_header.RTR = CAN_RTR_DATA;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61bb      	str	r3, [r7, #24]
	tx_header.DLC = 1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61fb      	str	r3, [r7, #28]
	tx_header.TransmitGlobalTime = DISABLE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	f887 3020 	strb.w	r3, [r7, #32]
	u8 DATA[1] = { Copy_u8DataSend };
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	723b      	strb	r3, [r7, #8]
	CAN_voidAddTxMsg(&tx_header, DATA);
 80002d8:	f107 0208 	add.w	r2, r7, #8
 80002dc:	f107 030c 	add.w	r3, r7, #12
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f878 	bl	80003d8 <CAN_voidAddTxMsg>

	return Local_enuErorr;
 80002e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	3728      	adds	r7, #40	; 0x28
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CommApp_voidReadClearUartVar>:
	Global_UartDataRecive = 0;
}
u8 CommApp_voidReadUartVar() {
	return Global_UartDataRecive;
}
u8 CommApp_voidReadClearUartVar() {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
	u8 local_temp = Global_UartDataRecive;
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <CommApp_voidReadClearUartVar+0x20>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
	Global_UartDataRecive = 0;
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <CommApp_voidReadClearUartVar+0x20>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
	return local_temp;
 8000306:	79fb      	ldrb	r3, [r7, #7]
}
 8000308:	4618      	mov	r0, r3
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	2000001c 	.word	0x2000001c

08000318 <CommApp_voidUart_ISRFunction>:

void CommApp_voidUart_ISRFunction() {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	UART1_u8RecieveByte(&Global_UartDataRecive);
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <CommApp_voidUart_ISRFunction+0x10>)
 800031e:	f000 fbeb 	bl	8000af8 <UART1_u8RecieveByte>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	2000001c 	.word	0x2000001c

0800032c <CAN_voidInit>:

CAN_Interrupt_Callbacks CAN_TxMailboxAbortCallback[3] = {
		&CAN_TxMailbox0AbortCallback, &CAN_TxMailbox1AbortCallback,
		&CAN_TxMailbox2AbortCallback };

void CAN_voidInit(void) {
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	 GPIO_voidSetPinDirection(GPIOB, PIN9, OUTPUT_SPEED_2MHZ_AFPP); //TX

	 */
	/**  exit CAN sleep mode **/
	/* CLEAR SLEEP bit (SLEEP) */
	CLR_BIT(CAN->MCR, 1);
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <CAN_voidInit+0xa8>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a27      	ldr	r2, [pc, #156]	; (80003d4 <CAN_voidInit+0xa8>)
 8000336:	f023 0302 	bic.w	r3, r3, #2
 800033a:	6013      	str	r3, [r2, #0]
	/* wait to exit sleep mode */
	while (!(READ_BIT(CAN->MSR, 1) == 0))
 800033c:	bf00      	nop
 800033e:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <CAN_voidInit+0xa8>)
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	085b      	lsrs	r3, r3, #1
 8000344:	f003 0301 	and.w	r3, r3, #1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d1f8      	bne.n	800033e <CAN_voidInit+0x12>
		;
	/**  Set CAN Initialization mode **/
	/* SET Initialization request BIT (INRQ) */
	SET_BIT(CAN->MCR, 0);
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <CAN_voidInit+0xa8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a20      	ldr	r2, [pc, #128]	; (80003d4 <CAN_voidInit+0xa8>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6013      	str	r3, [r2, #0]
	/* wait to enter in Initialization mode */
	while (!(READ_BIT(CAN->MSR, 0) == 1))
 8000358:	bf00      	nop
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <CAN_voidInit+0xa8>)
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b01      	cmp	r3, #1
 8000364:	d1f9      	bne.n	800035a <CAN_voidInit+0x2e>
#if TransmitFifoPriority == ENABLE
     /* by the request order */
        SET_BIT(CAN->MCR,2); //TXFP
#else
	/* by the identifier of the message */
	CLR_BIT(CAN->MCR, 2); //TXFP
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <CAN_voidInit+0xa8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a1a      	ldr	r2, [pc, #104]	; (80003d4 <CAN_voidInit+0xa8>)
 800036c:	f023 0304 	bic.w	r3, r3, #4
 8000370:	6013      	str	r3, [r2, #0]
         Once a receive FIFO is full the next incoming message will be discarded. */
        SET_BIT(CAN->MCR,3); //RFLM
#else
	/* Receive FIFO not locked on overrun.
	 Once a receive FIFO is full the next incoming message will overwrite the previous one. */
	CLR_BIT(CAN->MCR, 3); //RFLM
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <CAN_voidInit+0xa8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <CAN_voidInit+0xa8>)
 8000378:	f023 0308 	bic.w	r3, r3, #8
 800037c:	6013      	str	r3, [r2, #0]
#endif
	/** CHECK automatic retransmission **/
#if AutoRetransmission == ENABLE
	CLR_BIT(CAN->MCR, 4); //NART
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <CAN_voidInit+0xa8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <CAN_voidInit+0xa8>)
 8000384:	f023 0310 	bic.w	r3, r3, #16
 8000388:	6013      	str	r3, [r2, #0]
        SET_BIT(CAN->MCR,4); //NART
#endif

	/** CHECK automatic wakeup mode **/
#if AutoBussOff == ENABLE
	SET_BIT(CAN->MCR, 5); //AWUM
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <CAN_voidInit+0xa8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a11      	ldr	r2, [pc, #68]	; (80003d4 <CAN_voidInit+0xa8>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	6013      	str	r3, [r2, #0]
       CLR_BIT(CAN->MCR,5); //AWUM
#endif

	/** CHECK automatic bus-off management **/
#if AutoBussOff == ENABLE
	SET_BIT(CAN->MCR, 6); //ABOM
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <CAN_voidInit+0xa8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <CAN_voidInit+0xa8>)
 800039c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a0:	6013      	str	r3, [r2, #0]

	/** CHECK Time triggered communication mode **/
#if TimeTriggeredMode == ENABLE
        SET_BIT(CAN->MCR,7); //TTCM
#else
	CLR_BIT(CAN->MCR, 7); //TTCM
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <CAN_voidInit+0xa8>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <CAN_voidInit+0xa8>)
 80003a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003ac:	6013      	str	r3, [r2, #0]
#endif

	/** Set the bit timing register **/
	CAN->BTR = (u32) (MODE | ((CAN_bitRateConfig[BOUDRATE].TS2 - 1) << 20)
 80003ae:	2302      	movs	r3, #2
 80003b0:	3b01      	subs	r3, #1
 80003b2:	051b      	lsls	r3, r3, #20
 80003b4:	461a      	mov	r2, r3
			| ((CAN_bitRateConfig[BOUDRATE].TS1 - 1) << 16)
 80003b6:	230f      	movs	r3, #15
 80003b8:	3b01      	subs	r3, #1
 80003ba:	041b      	lsls	r3, r3, #16
 80003bc:	4313      	orrs	r3, r2
			| (CAN_bitRateConfig[BOUDRATE].BRP - 1));
 80003be:	2204      	movs	r2, #4
 80003c0:	3a01      	subs	r2, #1
 80003c2:	4611      	mov	r1, r2
	CAN->BTR = (u32) (MODE | ((CAN_bitRateConfig[BOUDRATE].TS2 - 1) << 20)
 80003c4:	4a03      	ldr	r2, [pc, #12]	; (80003d4 <CAN_voidInit+0xa8>)
 80003c6:	430b      	orrs	r3, r1
 80003c8:	61d3      	str	r3, [r2, #28]
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40006400 	.word	0x40006400

080003d8 <CAN_voidAddTxMsg>:

void CAN_voidAddTxMsg(CAN_TxHeaderTypeDef *pTxHeader, u8 Local_u8Data[]) {
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
	u32 local_u8TransmitMailbox; // which mailbox is empty to set Local_u8Data in it (read CODE bit in TSR register)
	u32 local_u32TSR; //transmit status register
	local_u32TSR = CAN->TSR;
 80003e2:	4b4f      	ldr	r3, [pc, #316]	; (8000520 <CAN_voidAddTxMsg+0x148>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	60fb      	str	r3, [r7, #12]
	/* Check that all the Tx mailboxes are not full */
//	while(1)
//	{
	if ((READ_BIT(local_u32TSR, 26) != 0x0) || /* TME0 */
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	0e9b      	lsrs	r3, r3, #26
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10c      	bne.n	800040e <CAN_voidAddTxMsg+0x36>
	(READ_BIT(local_u32TSR, 27) != 0x0) || /* TME1 */
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	0edb      	lsrs	r3, r3, #27
 80003f8:	f003 0301 	and.w	r3, r3, #1
	if ((READ_BIT(local_u32TSR, 26) != 0x0) || /* TME0 */
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d106      	bne.n	800040e <CAN_voidAddTxMsg+0x36>
	(READ_BIT(local_u32TSR, 28) != 0x0)) /* TME2 */
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	0f1b      	lsrs	r3, r3, #28
 8000404:	f003 0301 	and.w	r3, r3, #1
	(READ_BIT(local_u32TSR, 27) != 0x0) || /* TME1 */
 8000408:	2b00      	cmp	r3, #0
 800040a:	f000 8084 	beq.w	8000516 <CAN_voidAddTxMsg+0x13e>
	{
		/* Select an empty transmit mailbox */
		local_u8TransmitMailbox = ((local_u32TSR >> 24) & 0x3); //(read CODE[1:0] bit in TSR register)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	0e1b      	lsrs	r3, r3, #24
 8000412:	f003 0303 	and.w	r3, r3, #3
 8000416:	60bb      	str	r3, [r7, #8]
		/* Check transmit mailbox value */
		if (local_u8TransmitMailbox <= 2) {
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	2b02      	cmp	r3, #2
 800041c:	d87b      	bhi.n	8000516 <CAN_voidAddTxMsg+0x13e>
			/* Set up the Id */
			if (pTxHeader->IDE == CAN_ID_STD) {
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d10c      	bne.n	8000440 <CAN_voidAddTxMsg+0x68>
				CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
						<< 21) | pTxHeader->RTR);
 800042a:	055a      	lsls	r2, r3, #21
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	68db      	ldr	r3, [r3, #12]
				CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId
 8000430:	493b      	ldr	r1, [pc, #236]	; (8000520 <CAN_voidAddTxMsg+0x148>)
						<< 21) | pTxHeader->RTR);
 8000432:	431a      	orrs	r2, r3
				CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	3318      	adds	r3, #24
 8000438:	011b      	lsls	r3, r3, #4
 800043a:	440b      	add	r3, r1
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	e00e      	b.n	800045e <CAN_voidAddTxMsg+0x86>
			} else {
				CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	685b      	ldr	r3, [r3, #4]
						<< 3) | pTxHeader->IDE | pTxHeader->RTR);
 8000444:	00da      	lsls	r2, r3, #3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	689b      	ldr	r3, [r3, #8]
 800044a:	431a      	orrs	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	68db      	ldr	r3, [r3, #12]
				CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId
 8000450:	4933      	ldr	r1, [pc, #204]	; (8000520 <CAN_voidAddTxMsg+0x148>)
						<< 3) | pTxHeader->IDE | pTxHeader->RTR);
 8000452:	431a      	orrs	r2, r3
				CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	3318      	adds	r3, #24
 8000458:	011b      	lsls	r3, r3, #4
 800045a:	440b      	add	r3, r1
 800045c:	601a      	str	r2, [r3, #0]
			}

			/* Set up the DLC */
			CAN->TxMailBox[local_u8TransmitMailbox].TDTR = (pTxHeader->DLC);
 800045e:	4930      	ldr	r1, [pc, #192]	; (8000520 <CAN_voidAddTxMsg+0x148>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	691a      	ldr	r2, [r3, #16]
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	3318      	adds	r3, #24
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	440b      	add	r3, r1
 800046c:	3304      	adds	r3, #4
 800046e:	601a      	str	r2, [r3, #0]
			/* Set up the Transmit Global Time mode */
			if (pTxHeader->TransmitGlobalTime == ENABLE) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	7d1b      	ldrb	r3, [r3, #20]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d10f      	bne.n	8000498 <CAN_voidAddTxMsg+0xc0>
				SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TDTR, 8);
 8000478:	4a29      	ldr	r2, [pc, #164]	; (8000520 <CAN_voidAddTxMsg+0x148>)
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	3318      	adds	r3, #24
 800047e:	011b      	lsls	r3, r3, #4
 8000480:	4413      	add	r3, r2
 8000482:	3304      	adds	r3, #4
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4926      	ldr	r1, [pc, #152]	; (8000520 <CAN_voidAddTxMsg+0x148>)
 8000488:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	3318      	adds	r3, #24
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	440b      	add	r3, r1
 8000494:	3304      	adds	r3, #4
 8000496:	601a      	str	r2, [r3, #0]
			}
			/* Set up the Local_u8Data field */
			CAN->TxMailBox[local_u8TransmitMailbox].TDHR =
					((u32) Local_u8Data[7] << 24)
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	3307      	adds	r3, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	061a      	lsls	r2, r3, #24
							| ((u32) Local_u8Data[6] << 16)
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	3306      	adds	r3, #6
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	041b      	lsls	r3, r3, #16
 80004a8:	431a      	orrs	r2, r3
							| ((u32) Local_u8Data[5] << 8)
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	3305      	adds	r3, #5
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	021b      	lsls	r3, r3, #8
 80004b2:	4313      	orrs	r3, r2
							| ((u32) Local_u8Data[4]);
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	3204      	adds	r2, #4
 80004b8:	7812      	ldrb	r2, [r2, #0]
			CAN->TxMailBox[local_u8TransmitMailbox].TDHR =
 80004ba:	4919      	ldr	r1, [pc, #100]	; (8000520 <CAN_voidAddTxMsg+0x148>)
							| ((u32) Local_u8Data[4]);
 80004bc:	431a      	orrs	r2, r3
			CAN->TxMailBox[local_u8TransmitMailbox].TDHR =
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	011b      	lsls	r3, r3, #4
 80004c2:	440b      	add	r3, r1
 80004c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80004c8:	601a      	str	r2, [r3, #0]
			CAN->TxMailBox[local_u8TransmitMailbox].TDLR =
					((u32) Local_u8Data[3] << 24)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	3303      	adds	r3, #3
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	061a      	lsls	r2, r3, #24
							| ((u32) Local_u8Data[2] << 16)
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	3302      	adds	r3, #2
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	041b      	lsls	r3, r3, #16
 80004da:	431a      	orrs	r2, r3
							| ((u32) Local_u8Data[1] << 8)
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	4313      	orrs	r3, r2
							| ((u32) Local_u8Data[0]);
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	7812      	ldrb	r2, [r2, #0]
			CAN->TxMailBox[local_u8TransmitMailbox].TDLR =
 80004ea:	490d      	ldr	r1, [pc, #52]	; (8000520 <CAN_voidAddTxMsg+0x148>)
							| ((u32) Local_u8Data[0]);
 80004ec:	431a      	orrs	r2, r3
			CAN->TxMailBox[local_u8TransmitMailbox].TDLR =
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	440b      	add	r3, r1
 80004f4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80004f8:	601a      	str	r2, [r3, #0]
			/* Request transmission */
			SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TIR, 0);
 80004fa:	4a09      	ldr	r2, [pc, #36]	; (8000520 <CAN_voidAddTxMsg+0x148>)
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	3318      	adds	r3, #24
 8000500:	011b      	lsls	r3, r3, #4
 8000502:	4413      	add	r3, r2
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4906      	ldr	r1, [pc, #24]	; (8000520 <CAN_voidAddTxMsg+0x148>)
 8000508:	f043 0201 	orr.w	r2, r3, #1
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	3318      	adds	r3, #24
 8000510:	011b      	lsls	r3, r3, #4
 8000512:	440b      	add	r3, r1
 8000514:	601a      	str	r2, [r3, #0]
			//			while(READ_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TIR, 0) == 1); // clear by hardware when mailbox empty
		}
//			break;
//		}
	}
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	40006400 	.word	0x40006400

08000524 <CAN_voidStart>:

void CAN_voidStart(void) {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	/* CLEAR Initialization request BIT (INRQ) */
	CLR_BIT(CAN->MCR, 0);
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <CAN_voidStart+0x28>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <CAN_voidStart+0x28>)
 800052e:	f023 0301 	bic.w	r3, r3, #1
 8000532:	6013      	str	r3, [r2, #0]
	/* wait to enter in Initialization mode */
	while (!(READ_BIT(CAN->MSR, 0) == 0))
 8000534:	bf00      	nop
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <CAN_voidStart+0x28>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	2b00      	cmp	r3, #0
 8000540:	d1f9      	bne.n	8000536 <CAN_voidStart+0x12>
		;
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40006400 	.word	0x40006400

08000550 <CAN_voidConfigFilter>:
		/* return value of the Rx FIFO 1  */
		return (CAN->RF1R & 0X3);
	}
}
/** CAN CONFIG filter **/
void CAN_voidConfigFilter(CAN_FilterTypeDef *pFilterConfig) {
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	/* Initialization mode for the filter */
	SET_BIT(CAN->FMR, 0);
 8000558:	4b64      	ldr	r3, [pc, #400]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 800055a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800055e:	4a63      	ldr	r2, [pc, #396]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/* Convert filter number into bit position */
	u32 local_u32FilterBitPos = pFilterConfig->FilterBank;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	60fb      	str	r3, [r7, #12]

	/* Filter Deactivation */
	CLR_BIT(CAN->FA1R, pFilterConfig->FilterBank);
 800056e:	4b5f      	ldr	r3, [pc, #380]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000570:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	6952      	ldr	r2, [r2, #20]
 8000578:	2101      	movs	r1, #1
 800057a:	fa01 f202 	lsl.w	r2, r1, r2
 800057e:	43d2      	mvns	r2, r2
 8000580:	4611      	mov	r1, r2
 8000582:	4a5a      	ldr	r2, [pc, #360]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000584:	400b      	ands	r3, r1
 8000586:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/* Filter Scale */
	if (pFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT) {
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d128      	bne.n	80005e4 <CAN_voidConfigFilter+0x94>
		/* 16-bit scale for the filter */
		CLR_BIT(CAN->FS1R, local_u32FilterBitPos);
 8000592:	4b56      	ldr	r3, [pc, #344]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000594:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000598:	2101      	movs	r1, #1
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	fa01 f202 	lsl.w	r2, r1, r2
 80005a0:	43d2      	mvns	r2, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a51      	ldr	r2, [pc, #324]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		 * */

		/* First 16-bit identifier and First 16-bit mask */
		/* Or First 16-bit identifier and Second 16-bit identifier */
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =
				(((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	0419      	lsls	r1, r3, #16
						| (pFilterConfig->FilterIdLow & 0x0000FFFF));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	b29a      	uxth	r2, r3
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =
 80005b8:	484c      	ldr	r0, [pc, #304]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	695b      	ldr	r3, [r3, #20]
						| (pFilterConfig->FilterIdLow & 0x0000FFFF));
 80005be:	430a      	orrs	r2, r1
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =
 80005c0:	3348      	adds	r3, #72	; 0x48
 80005c2:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

		/* Second 16-bit identifier and Second 16-bit mask */
		/* Or Third 16-bit identifier and Fourth 16-bit identifier */
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =
				(((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	0419      	lsls	r1, r3, #16
						| (pFilterConfig->FilterIdHigh & 0x0000FFFF));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	b29a      	uxth	r2, r3
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =
 80005d2:	4846      	ldr	r0, [pc, #280]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	695b      	ldr	r3, [r3, #20]
						| (pFilterConfig->FilterIdHigh & 0x0000FFFF));
 80005d8:	430a      	orrs	r2, r1
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =
 80005da:	3348      	adds	r3, #72	; 0x48
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	4403      	add	r3, r0
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	e02a      	b.n	800063a <CAN_voidConfigFilter+0xea>
	}

	else if (pFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d126      	bne.n	800063a <CAN_voidConfigFilter+0xea>
		/* 32-bit scale for the filter */
		SET_BIT(CAN->FS1R, local_u32FilterBitPos);
 80005ec:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80005ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80005f2:	2101      	movs	r1, #1
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a3b      	ldr	r2, [pc, #236]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		 * STID[10:3] STID[2:0] EXID[17:13] EXID[12:5] EXID[4:0] IDE RTR 0
		 * */

		/* 32-bit identifier or First 32-bit identifier */
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =
				(((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	0419      	lsls	r1, r3, #16
						| (pFilterConfig->FilterIdLow & 0x0000FFFF));
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	b29a      	uxth	r2, r3
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =
 8000610:	4836      	ldr	r0, [pc, #216]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	695b      	ldr	r3, [r3, #20]
						| (pFilterConfig->FilterIdLow & 0x0000FFFF));
 8000616:	430a      	orrs	r2, r1
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =
 8000618:	3348      	adds	r3, #72	; 0x48
 800061a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

		/* 32-bit mask or Second 32-bit identifier */
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =
				(((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	0419      	lsls	r1, r3, #16
						| (pFilterConfig->FilterMaskIdLow & 0x0000FFFF));
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	b29a      	uxth	r2, r3
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =
 800062a:	4830      	ldr	r0, [pc, #192]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	695b      	ldr	r3, [r3, #20]
						| (pFilterConfig->FilterMaskIdLow & 0x0000FFFF));
 8000630:	430a      	orrs	r2, r1
		CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =
 8000632:	3348      	adds	r3, #72	; 0x48
 8000634:	00db      	lsls	r3, r3, #3
 8000636:	4403      	add	r3, r0
 8000638:	605a      	str	r2, [r3, #4]
	}

	/* Filter Mode */
	if (pFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d10d      	bne.n	800065e <CAN_voidConfigFilter+0x10e>
		/* Id/Mask mode for the filter*/
		CLR_BIT(CAN->FM1R, local_u32FilterBitPos);
 8000642:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000644:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000648:	2101      	movs	r1, #1
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	fa01 f202 	lsl.w	r2, r1, r2
 8000650:	43d2      	mvns	r2, r2
 8000652:	4611      	mov	r1, r2
 8000654:	4a25      	ldr	r2, [pc, #148]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000656:	400b      	ands	r3, r1
 8000658:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 800065c:	e00b      	b.n	8000676 <CAN_voidConfigFilter+0x126>
	} else {
		/* Identifier list mode for the filter*/
		SET_BIT(CAN->FM1R, local_u32FilterBitPos);
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000660:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000664:	2101      	movs	r1, #1
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000670:	430b      	orrs	r3, r1
 8000672:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	/* Filter FIFO assignment */
	if (pFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0) {
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	691b      	ldr	r3, [r3, #16]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10d      	bne.n	800069a <CAN_voidConfigFilter+0x14a>
		/* FIFO 0 assignation for the filter */
		CLR_BIT(CAN->FFA1R, local_u32FilterBitPos);
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000680:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000684:	2101      	movs	r1, #1
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	43d2      	mvns	r2, r2
 800068e:	4611      	mov	r1, r2
 8000690:	4a16      	ldr	r2, [pc, #88]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 8000692:	400b      	ands	r3, r1
 8000694:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8000698:	e00b      	b.n	80006b2 <CAN_voidConfigFilter+0x162>
	} else {
		/* FIFO 1 assignation for the filter */
		SET_BIT(CAN->FFA1R, local_u32FilterBitPos);
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 800069c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80006a0:	2101      	movs	r1, #1
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	fa01 f202 	lsl.w	r2, r1, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a10      	ldr	r2, [pc, #64]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80006ac:	430b      	orrs	r3, r1
 80006ae:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	}

	/* Filter activation */
	if (pFilterConfig->FilterActivation == ENABLE) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6a1b      	ldr	r3, [r3, #32]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d10b      	bne.n	80006d2 <CAN_voidConfigFilter+0x182>
		SET_BIT(CAN->FA1R, local_u32FilterBitPos);
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80006bc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80006c0:	2101      	movs	r1, #1
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	fa01 f202 	lsl.w	r2, r1, r2
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80006cc:	430b      	orrs	r3, r1
 80006ce:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}

	/* Leave the initialisation mode for the filter */
	CLR_BIT(CAN->FMR, 0);
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80006d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <CAN_voidConfigFilter+0x19c>)
 80006da:	f023 0301 	bic.w	r3, r3, #1
 80006de:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40006400 	.word	0x40006400

080006f0 <GPIO_u8Init>:
#include "GPIO_Private.h"
#include "GPIO_Interface.h"

extern GPIO_Conf_t GPIO_Conf_ARR[PINTOTAL];

Error_t GPIO_u8Init() {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

	for (u8 index = 0; index < PINTOTAL; index++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	e00f      	b.n	800071c <GPIO_u8Init+0x2c>
		GPIO_u8SetPinD_ID(GPIO_Conf_ARR[index].GPIO_u8_pin,
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <GPIO_u8Init+0x3c>)
 8000700:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4909      	ldr	r1, [pc, #36]	; (800072c <GPIO_u8Init+0x3c>)
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	440b      	add	r3, r1
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	4619      	mov	r1, r3
 8000710:	4610      	mov	r0, r2
 8000712:	f000 f80d 	bl	8000730 <GPIO_u8SetPinD_ID>
	for (u8 index = 0; index < PINTOTAL; index++) {
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	3301      	adds	r3, #1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b2f      	cmp	r3, #47	; 0x2f
 8000720:	d9ec      	bls.n	80006fc <GPIO_u8Init+0xc>
				GPIO_Conf_ARR[index].GPIO_u8_Mode);
	}
	return OK;
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	08000d60 	.word	0x08000d60

08000730 <GPIO_u8SetPinD_ID>:
		local_state = NOK;
		break;
	}
	return local_state;
}
Error_t GPIO_u8SetPinD_ID(GPIO_u8PIN_t Copy_u8PinId, u8 Copy_u8Mode) {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	460a      	mov	r2, r1
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
	u8 local_port = (Copy_u8PinId / GPIO_u8R_PINS) + 1;
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	091b      	lsrs	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	3301      	adds	r3, #1
 8000748:	73bb      	strb	r3, [r7, #14]
	u8 local_pin = Copy_u8PinId % GPIO_u8R_PINS;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f003 030f 	and.w	r3, r3, #15
 8000750:	737b      	strb	r3, [r7, #13]
	Error_t local_state = OK;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
	switch (local_port) {
 8000756:	7bbb      	ldrb	r3, [r7, #14]
 8000758:	2b03      	cmp	r3, #3
 800075a:	d07d      	beq.n	8000858 <GPIO_u8SetPinD_ID+0x128>
 800075c:	2b03      	cmp	r3, #3
 800075e:	f300 80b6 	bgt.w	80008ce <GPIO_u8SetPinD_ID+0x19e>
 8000762:	2b01      	cmp	r3, #1
 8000764:	d002      	beq.n	800076c <GPIO_u8SetPinD_ID+0x3c>
 8000766:	2b02      	cmp	r3, #2
 8000768:	d03b      	beq.n	80007e2 <GPIO_u8SetPinD_ID+0xb2>
 800076a:	e0b0      	b.n	80008ce <GPIO_u8SetPinD_ID+0x19e>
	case GPIO_PORTA:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 800076c:	7b7b      	ldrb	r3, [r7, #13]
 800076e:	2b07      	cmp	r3, #7
 8000770:	d817      	bhi.n	80007a2 <GPIO_u8SetPinD_ID+0x72>
			GPIO_A->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000772:	4b5b      	ldr	r3, [pc, #364]	; (80008e0 <GPIO_u8SetPinD_ID+0x1b0>)
 8000774:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000776:	7b7a      	ldrb	r2, [r7, #13]
 8000778:	0092      	lsls	r2, r2, #2
 800077a:	210f      	movs	r1, #15
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_A->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 8000780:	43d2      	mvns	r2, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a56      	ldr	r2, [pc, #344]	; (80008e0 <GPIO_u8SetPinD_ID+0x1b0>)
 8000786:	400b      	ands	r3, r1
 8000788:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRL |= ((Copy_u8Mode)
 800078a:	4b55      	ldr	r3, [pc, #340]	; (80008e0 <GPIO_u8SetPinD_ID+0x1b0>)
 800078c:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 800078e:	79b9      	ldrb	r1, [r7, #6]
 8000790:	7b7a      	ldrb	r2, [r7, #13]
 8000792:	0092      	lsls	r2, r2, #2
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4611      	mov	r1, r2
			GPIO_A->GPIO_CRL |= ((Copy_u8Mode)
 800079a:	4a51      	ldr	r2, [pc, #324]	; (80008e0 <GPIO_u8SetPinD_ID+0x1b0>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6013      	str	r3, [r2, #0]
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 80007a0:	e098      	b.n	80008d4 <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 80007a2:	7b7b      	ldrb	r3, [r7, #13]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d819      	bhi.n	80007dc <GPIO_u8SetPinD_ID+0xac>
			GPIO_A->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 80007a8:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <GPIO_u8SetPinD_ID+0x1b0>)
 80007aa:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 80007ac:	7b7a      	ldrb	r2, [r7, #13]
 80007ae:	3a08      	subs	r2, #8
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	210f      	movs	r1, #15
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_A->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 80007b8:	43d2      	mvns	r2, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a48      	ldr	r2, [pc, #288]	; (80008e0 <GPIO_u8SetPinD_ID+0x1b0>)
 80007be:	400b      	ands	r3, r1
 80007c0:	6053      	str	r3, [r2, #4]
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
 80007c2:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <GPIO_u8SetPinD_ID+0x1b0>)
 80007c4:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 80007c6:	79b9      	ldrb	r1, [r7, #6]
 80007c8:	7b7a      	ldrb	r2, [r7, #13]
 80007ca:	3a08      	subs	r2, #8
 80007cc:	0092      	lsls	r2, r2, #2
 80007ce:	fa01 f202 	lsl.w	r2, r1, r2
 80007d2:	4611      	mov	r1, r2
			GPIO_A->GPIO_CRH |= ((Copy_u8Mode)
 80007d4:	4a42      	ldr	r2, [pc, #264]	; (80008e0 <GPIO_u8SetPinD_ID+0x1b0>)
 80007d6:	430b      	orrs	r3, r1
 80007d8:	6053      	str	r3, [r2, #4]
		break;
 80007da:	e07b      	b.n	80008d4 <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
		break;
 80007e0:	e078      	b.n	80008d4 <GPIO_u8SetPinD_ID+0x1a4>
	case GPIO_PORTB:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	2b07      	cmp	r3, #7
 80007e6:	d817      	bhi.n	8000818 <GPIO_u8SetPinD_ID+0xe8>
			GPIO_B->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 80007e8:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <GPIO_u8SetPinD_ID+0x1b4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 80007ec:	7b7a      	ldrb	r2, [r7, #13]
 80007ee:	0092      	lsls	r2, r2, #2
 80007f0:	210f      	movs	r1, #15
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_B->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 80007f6:	43d2      	mvns	r2, r2
 80007f8:	4611      	mov	r1, r2
 80007fa:	4a3a      	ldr	r2, [pc, #232]	; (80008e4 <GPIO_u8SetPinD_ID+0x1b4>)
 80007fc:	400b      	ands	r3, r1
 80007fe:	6013      	str	r3, [r2, #0]
			GPIO_B->GPIO_CRL |= ((Copy_u8Mode)
 8000800:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <GPIO_u8SetPinD_ID+0x1b4>)
 8000802:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000804:	79b9      	ldrb	r1, [r7, #6]
 8000806:	7b7a      	ldrb	r2, [r7, #13]
 8000808:	0092      	lsls	r2, r2, #2
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	4611      	mov	r1, r2
			GPIO_B->GPIO_CRL |= ((Copy_u8Mode)
 8000810:	4a34      	ldr	r2, [pc, #208]	; (80008e4 <GPIO_u8SetPinD_ID+0x1b4>)
 8000812:	430b      	orrs	r3, r1
 8000814:	6013      	str	r3, [r2, #0]
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 8000816:	e05d      	b.n	80008d4 <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 8000818:	7b7b      	ldrb	r3, [r7, #13]
 800081a:	2b0f      	cmp	r3, #15
 800081c:	d819      	bhi.n	8000852 <GPIO_u8SetPinD_ID+0x122>
			GPIO_B->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 800081e:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <GPIO_u8SetPinD_ID+0x1b4>)
 8000820:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000822:	7b7a      	ldrb	r2, [r7, #13]
 8000824:	3a08      	subs	r2, #8
 8000826:	0092      	lsls	r2, r2, #2
 8000828:	210f      	movs	r1, #15
 800082a:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_B->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 800082e:	43d2      	mvns	r2, r2
 8000830:	4611      	mov	r1, r2
 8000832:	4a2c      	ldr	r2, [pc, #176]	; (80008e4 <GPIO_u8SetPinD_ID+0x1b4>)
 8000834:	400b      	ands	r3, r1
 8000836:	6053      	str	r3, [r2, #4]
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <GPIO_u8SetPinD_ID+0x1b4>)
 800083a:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 800083c:	79b9      	ldrb	r1, [r7, #6]
 800083e:	7b7a      	ldrb	r2, [r7, #13]
 8000840:	3a08      	subs	r2, #8
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	fa01 f202 	lsl.w	r2, r1, r2
 8000848:	4611      	mov	r1, r2
			GPIO_B->GPIO_CRH |= ((Copy_u8Mode)
 800084a:	4a26      	ldr	r2, [pc, #152]	; (80008e4 <GPIO_u8SetPinD_ID+0x1b4>)
 800084c:	430b      	orrs	r3, r1
 800084e:	6053      	str	r3, [r2, #4]
		break;
 8000850:	e040      	b.n	80008d4 <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 8000852:	2301      	movs	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
		break;
 8000856:	e03d      	b.n	80008d4 <GPIO_u8SetPinD_ID+0x1a4>
	case GPIO_PORTC:
		if (local_pin <= GPIO_u8f_REG_LEN) {
 8000858:	7b7b      	ldrb	r3, [r7, #13]
 800085a:	2b07      	cmp	r3, #7
 800085c:	d817      	bhi.n	800088e <GPIO_u8SetPinD_ID+0x15e>
			GPIO_C->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <GPIO_u8SetPinD_ID+0x1b8>)
 8000860:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 8000862:	7b7a      	ldrb	r2, [r7, #13]
 8000864:	0092      	lsls	r2, r2, #2
 8000866:	210f      	movs	r1, #15
 8000868:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_C->GPIO_CRL &= ~((GPIO_u8CLR_MASK)
 800086c:	43d2      	mvns	r2, r2
 800086e:	4611      	mov	r1, r2
 8000870:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <GPIO_u8SetPinD_ID+0x1b8>)
 8000872:	400b      	ands	r3, r1
 8000874:	6013      	str	r3, [r2, #0]
			GPIO_C->GPIO_CRL |= ((Copy_u8Mode)
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <GPIO_u8SetPinD_ID+0x1b8>)
 8000878:	681b      	ldr	r3, [r3, #0]
					<< (local_pin * GPIO_u8PIN_REG_SIZE));
 800087a:	79b9      	ldrb	r1, [r7, #6]
 800087c:	7b7a      	ldrb	r2, [r7, #13]
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	4611      	mov	r1, r2
			GPIO_C->GPIO_CRL |= ((Copy_u8Mode)
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <GPIO_u8SetPinD_ID+0x1b8>)
 8000888:	430b      	orrs	r3, r1
 800088a:	6013      	str	r3, [r2, #0]
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
		} else {
			local_state = NOK;
		}
		break;
 800088c:	e022      	b.n	80008d4 <GPIO_u8SetPinD_ID+0x1a4>
		} else if (local_pin <= GPIO_u8L_REG_LEN) {
 800088e:	7b7b      	ldrb	r3, [r7, #13]
 8000890:	2b0f      	cmp	r3, #15
 8000892:	d819      	bhi.n	80008c8 <GPIO_u8SetPinD_ID+0x198>
			GPIO_C->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <GPIO_u8SetPinD_ID+0x1b8>)
 8000896:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 8000898:	7b7a      	ldrb	r2, [r7, #13]
 800089a:	3a08      	subs	r2, #8
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	210f      	movs	r1, #15
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
			GPIO_C->GPIO_CRH &= ~((GPIO_u8CLR_MASK)
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <GPIO_u8SetPinD_ID+0x1b8>)
 80008aa:	400b      	ands	r3, r1
 80008ac:	6053      	str	r3, [r2, #4]
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <GPIO_u8SetPinD_ID+0x1b8>)
 80008b0:	685b      	ldr	r3, [r3, #4]
					<< ((local_pin - GPIO_u8OFSET) * GPIO_u8PIN_REG_SIZE));
 80008b2:	79b9      	ldrb	r1, [r7, #6]
 80008b4:	7b7a      	ldrb	r2, [r7, #13]
 80008b6:	3a08      	subs	r2, #8
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	fa01 f202 	lsl.w	r2, r1, r2
 80008be:	4611      	mov	r1, r2
			GPIO_C->GPIO_CRH |= ((Copy_u8Mode)
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <GPIO_u8SetPinD_ID+0x1b8>)
 80008c2:	430b      	orrs	r3, r1
 80008c4:	6053      	str	r3, [r2, #4]
		break;
 80008c6:	e005      	b.n	80008d4 <GPIO_u8SetPinD_ID+0x1a4>
			local_state = NOK;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
		break;
 80008cc:	e002      	b.n	80008d4 <GPIO_u8SetPinD_ID+0x1a4>
	default:
		local_state = NOK;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
		break;
 80008d2:	bf00      	nop
	}

	return local_state;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	40010800 	.word	0x40010800
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	40011000 	.word	0x40011000

080008ec <NVIC_u8Set_EN_IRQ>:
	SCB->AIRCR = NVIC_PR_OPTIONS;

	return OK;
}

Error_t NVIC_u8Set_EN_IRQ(NVIC_Prority_t Copy_IRQ_ID) {
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	Error_t Copy_status = OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]
	u8 Copy_ID_Index = Copy_IRQ_ID / NVIC_REG_SIZE;
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	095b      	lsrs	r3, r3, #5
 80008fe:	73bb      	strb	r3, [r7, #14]
	if (Copy_IRQ_ID < INTERRUPT_TOTAL) {
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b3b      	cmp	r3, #59	; 0x3b
 8000904:	d80c      	bhi.n	8000920 <NVIC_u8Set_EN_IRQ+0x34>
		Copy_IRQ_ID = Copy_IRQ_ID % NVIC_REG_SIZE;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 031f 	and.w	r3, r3, #31
 800090c:	71fb      	strb	r3, [r7, #7]
		NVIC->NVIC_ISER[Copy_ID_Index] = 1 << Copy_IRQ_ID;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2201      	movs	r2, #1
 8000912:	fa02 f103 	lsl.w	r1, r2, r3
 8000916:	4a06      	ldr	r2, [pc, #24]	; (8000930 <NVIC_u8Set_EN_IRQ+0x44>)
 8000918:	7bbb      	ldrb	r3, [r7, #14]
 800091a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800091e:	e001      	b.n	8000924 <NVIC_u8Set_EN_IRQ+0x38>
	} else {
		Copy_status = NOK;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
	}
	return Copy_status;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100

08000934 <RCC_voidInitSystemClock>:
#include "RCC_Private.h"
#include "RCC_CONF.h"
#include "RCC_Interface.h"

void RCC_voidInitSystemClock(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
#if RCC_u8CLK_TYPE==RCC_u8HSE_CRYSTAL
	RCC->RCC_CR=0x00010080;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <RCC_voidInitSystemClock+0x14>)
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <RCC_voidInitSystemClock+0x18>)
 800093c:	601a      	str	r2, [r3, #0]
	RCC->RCC_CR = 0x00010080;
#else
	#error("You choosed wrong Clock Type")
#endif

}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000
 800094c:	00010080 	.word	0x00010080

08000950 <RCC_voidEnablePeriphralCLK>:

Error_t RCC_voidEnablePeriphralCLK(PeriphralBusId_t Copy_enPeriphralId)
{	
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8BusID =Copy_enPeriphralId/100;
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	4a25      	ldr	r2, [pc, #148]	; (80009f4 <RCC_voidEnablePeriphralCLK+0xa4>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	b29b      	uxth	r3, r3
 8000966:	73bb      	strb	r3, [r7, #14]
	u8 Local_u8PeriphralID =Copy_enPeriphralId % 100;
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <RCC_voidEnablePeriphralCLK+0xa4>)
 800096c:	fba2 1203 	umull	r1, r2, r2, r3
 8000970:	0952      	lsrs	r2, r2, #5
 8000972:	2164      	movs	r1, #100	; 0x64
 8000974:	fb01 f202 	mul.w	r2, r1, r2
 8000978:	1a9b      	subs	r3, r3, r2
 800097a:	b29b      	uxth	r3, r3
 800097c:	737b      	strb	r3, [r7, #13]

	Error_t Local_enErrorState=OK;
 800097e:	2300      	movs	r3, #0
 8000980:	73fb      	strb	r3, [r7, #15]

	if(Local_u8PeriphralID  <= 31) //unsigned
 8000982:	7b7b      	ldrb	r3, [r7, #13]
 8000984:	2b1f      	cmp	r3, #31
 8000986:	d82d      	bhi.n	80009e4 <RCC_voidEnablePeriphralCLK+0x94>
	{
		switch(Local_u8BusID)
 8000988:	7bbb      	ldrb	r3, [r7, #14]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d01c      	beq.n	80009c8 <RCC_voidEnablePeriphralCLK+0x78>
 800098e:	2b03      	cmp	r3, #3
 8000990:	dc25      	bgt.n	80009de <RCC_voidEnablePeriphralCLK+0x8e>
 8000992:	2b01      	cmp	r3, #1
 8000994:	d002      	beq.n	800099c <RCC_voidEnablePeriphralCLK+0x4c>
 8000996:	2b02      	cmp	r3, #2
 8000998:	d00b      	beq.n	80009b2 <RCC_voidEnablePeriphralCLK+0x62>
 800099a:	e020      	b.n	80009de <RCC_voidEnablePeriphralCLK+0x8e>
		{
		case RCC_u8AHB: SET_BIT(RCC->RCC_AHBENR,Local_u8PeriphralID) ;    	
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <RCC_voidEnablePeriphralCLK+0xa8>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	7b7a      	ldrb	r2, [r7, #13]
 80009a2:	2101      	movs	r1, #1
 80009a4:	fa01 f202 	lsl.w	r2, r1, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <RCC_voidEnablePeriphralCLK+0xa8>)
 80009ac:	430b      	orrs	r3, r1
 80009ae:	6153      	str	r3, [r2, #20]
			break;
 80009b0:	e01a      	b.n	80009e8 <RCC_voidEnablePeriphralCLK+0x98>

		case RCC_u8APB2:SET_BIT(RCC->RCC_APB2ENR,Local_u8PeriphralID) ;	
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <RCC_voidEnablePeriphralCLK+0xa8>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	7b7a      	ldrb	r2, [r7, #13]
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	4611      	mov	r1, r2
 80009c0:	4a0d      	ldr	r2, [pc, #52]	; (80009f8 <RCC_voidEnablePeriphralCLK+0xa8>)
 80009c2:	430b      	orrs	r3, r1
 80009c4:	6193      	str	r3, [r2, #24]
			break;
 80009c6:	e00f      	b.n	80009e8 <RCC_voidEnablePeriphralCLK+0x98>

		case RCC_u8APB1: SET_BIT(RCC->RCC_APB1ENR,Local_u8PeriphralID) ;	
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <RCC_voidEnablePeriphralCLK+0xa8>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	7b7a      	ldrb	r2, [r7, #13]
 80009ce:	2101      	movs	r1, #1
 80009d0:	fa01 f202 	lsl.w	r2, r1, r2
 80009d4:	4611      	mov	r1, r2
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <RCC_voidEnablePeriphralCLK+0xa8>)
 80009d8:	430b      	orrs	r3, r1
 80009da:	61d3      	str	r3, [r2, #28]
			break;
 80009dc:	e004      	b.n	80009e8 <RCC_voidEnablePeriphralCLK+0x98>
			
			
			
		default:
			Local_enErrorState=NOK;
 80009de:	2301      	movs	r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]
			break;
 80009e2:	e001      	b.n	80009e8 <RCC_voidEnablePeriphralCLK+0x98>
		}

	}
	else
	{
		Local_enErrorState=NOK;
 80009e4:	2301      	movs	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]

	}

	return Local_enErrorState;
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	51eb851f 	.word	0x51eb851f
 80009f8:	40021000 	.word	0x40021000

080009fc <STK_u8StopTimer>:
	}

	// return
	return local_u8status;
}
Error_t STK_u8StopTimer() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	// set loud and value with zeroxs
	Error_t local_u8status = OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	71fb      	strb	r3, [r7, #7]
	CLR_BIT(SYSTICK->STK_CTRL, 0);
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <STK_u8StopTimer+0x30>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <STK_u8StopTimer+0x30>)
 8000a0c:	f023 0301 	bic.w	r3, r3, #1
 8000a10:	6013      	str	r3, [r2, #0]
	SYSTICK->STK_LOAD = 0;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <STK_u8StopTimer+0x30>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
	SYSTICK->STK_VAL = 0;
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <STK_u8StopTimer+0x30>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
	STK_u8DSInterrupt();
 8000a1e:	f000 f807 	bl	8000a30 <STK_u8DSInterrupt>

	return local_u8status;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <STK_u8DSInterrupt>:
Error_t STK_u8ENInterrupt() {
	SET_BIT(SYSTICK->STK_CTRL, 1);
	return OK;

}
Error_t STK_u8DSInterrupt() {
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
	CLR_BIT(SYSTICK->STK_CTRL, 1);
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <STK_u8DSInterrupt+0x1c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <STK_u8DSInterrupt+0x1c>)
 8000a3a:	f023 0302 	bic.w	r3, r3, #2
 8000a3e:	6013      	str	r3, [r2, #0]
	return OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <SysTick_Handler>:
	} else {
		local_u8status = NOK;
	}
	return local_u8status;
}
void SysTick_Handler() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

	if (STK_CHAECK_PERODIC == 1) {
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <SysTick_Handler+0x28>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d107      	bne.n	8000a6c <SysTick_Handler+0x1c>
		STK_u8StopTimer();
 8000a5c:	f7ff ffce 	bl	80009fc <STK_u8StopTimer>
		STK_CHAECK_PERODIC = 0;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SysTick_Handler+0x28>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
		STK_ProtectionFlage = 0;
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SysTick_Handler+0x2c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
	} else {
		// do nothing
	}
	STK_PtrCallBack();
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Handler+0x30>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4798      	blx	r3

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000024 	.word	0x20000024
 8000a7c:	20000025 	.word	0x20000025
 8000a80:	20000020 	.word	0x20000020

08000a84 <UART1_voidInit>:
/*
 void (*UART1_CallBack[UART_CALLBACK_SIZE])(void) =
 {	NULLPTR, NULLPTR,NULLPTR,NULLPTR };
 */

void UART1_voidInit() {
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

	/******** baud rate **********/
	UART1->USART_BRR = BAUDRATE;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <UART1_voidInit+0x70>)
 8000a8a:	f240 3241 	movw	r2, #833	; 0x341
 8000a8e:	609a      	str	r2, [r3, #8]

	/******** frame format *******/
//no parity
	CLR_BIT(UART1->USART_CR1, PCE);
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <UART1_voidInit+0x70>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <UART1_voidInit+0x70>)
 8000a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a9a:	60d3      	str	r3, [r2, #12]
// 1 start 8bit data n stop
	CLR_BIT(UART1->USART_CR1, M);
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <UART1_voidInit+0x70>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <UART1_voidInit+0x70>)
 8000aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000aa6:	60d3      	str	r3, [r2, #12]
// 1 stop bit
	CLR_BIT(UART1->USART_CR2, StOP_0);
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <UART1_voidInit+0x70>)
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <UART1_voidInit+0x70>)
 8000aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ab2:	6113      	str	r3, [r2, #16]
	CLR_BIT(UART1->USART_CR2, StOP_1);
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <UART1_voidInit+0x70>)
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <UART1_voidInit+0x70>)
 8000aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000abe:	6113      	str	r3, [r2, #16]

	/******** enable RX **********/
	SET_BIT(UART1->USART_CR1, RE);
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <UART1_voidInit+0x70>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <UART1_voidInit+0x70>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	60d3      	str	r3, [r2, #12]
	/******** enable TX **********/
	SET_BIT(UART1->USART_CR1, TE);
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <UART1_voidInit+0x70>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <UART1_voidInit+0x70>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	60d3      	str	r3, [r2, #12]
	/*********UART enable ********/
	SET_BIT(UART1->USART_CR1, UE);
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <UART1_voidInit+0x70>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <UART1_voidInit+0x70>)
 8000ade:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ae2:	60d3      	str	r3, [r2, #12]
	// clr status reg
	UART1->USART_SR = 0;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <UART1_voidInit+0x70>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40013800 	.word	0x40013800

08000af8 <UART1_u8RecieveByte>:

	return local_u8Status;

}

Error_t UART1_u8RecieveByte(volatile u8 *data) {
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]
// return DR reg
	*data = UART1->USART_DR;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <UART1_u8RecieveByte+0x24>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	701a      	strb	r2, [r3, #0]
	return local_u8Status;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40013800 	.word	0x40013800

08000b20 <UART1_u8EnterruptEnRX>:
	UART1_MUNRX = 0;
	UART1_DataReady = 0;
}

Error_t UART1_u8RecieveStringBusyW8(u8 *data);
Error_t UART1_u8EnterruptEnRX(void) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
	Error_t local_u8Status = OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	71fb      	strb	r3, [r7, #7]
	SET_BIT(UART1->USART_CR1, RXNEIE);
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <UART1_u8EnterruptEnRX+0x24>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <UART1_u8EnterruptEnRX+0x24>)
 8000b30:	f043 0320 	orr.w	r3, r3, #32
 8000b34:	60d3      	str	r3, [r2, #12]
	return local_u8Status;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40013800 	.word	0x40013800

08000b48 <UART1_u8EnterruptCallBackRX>:
Error_t UART1_u8EnterruptDsRX(void) {
	Error_t local_u8Status = OK;
	CLR_BIT(UART1->USART_CR1, RXNEIE);
	return local_u8Status;
}
Error_t UART1_u8EnterruptCallBackRX(void (*Rx)(void)) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	Error_t local_u8Status = OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	73fb      	strb	r3, [r7, #15]
	if (Rx != NULLPTR) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <UART1_u8EnterruptCallBackRX+0x1a>
		GlobalRX = Rx;
 8000b5a:	4a06      	ldr	r2, [pc, #24]	; (8000b74 <UART1_u8EnterruptCallBackRX+0x2c>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	e001      	b.n	8000b66 <UART1_u8EnterruptCallBackRX+0x1e>
	} else {
		local_u8Status = NULL_PTR;
 8000b62:	2303      	movs	r3, #3
 8000b64:	73fb      	strb	r3, [r7, #15]
	}
	return local_u8Status;
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000028 	.word	0x20000028

08000b78 <USART1_IRQHandler>:
	Error_t local_u8Status = OK;

	return local_u8Status;
}

void USART1_IRQHandler(void) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	 } else {
	 // do nothing
	 }
	 }
	 */
	if (READ_BIT(UART1->USART_SR, RXNE)) {
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <USART1_IRQHandler+0x30>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	095b      	lsrs	r3, r3, #5
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00c      	beq.n	8000ba4 <USART1_IRQHandler+0x2c>
		if (GlobalRX) {
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <USART1_IRQHandler+0x34>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <USART1_IRQHandler+0x20>
			GlobalRX();
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <USART1_IRQHandler+0x34>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4798      	blx	r3

		}
		CLR_BIT(UART1->USART_SR, RXNE);
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <USART1_IRQHandler+0x30>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a02      	ldr	r2, [pc, #8]	; (8000ba8 <USART1_IRQHandler+0x30>)
 8000b9e:	f023 0320 	bic.w	r3, r3, #32
 8000ba2:	6013      	str	r3, [r2, #0]

	}

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	20000028 	.word	0x20000028

08000bb0 <UART2_voidInit>:
/*
 void (*UART2_CallBack[UART_CALLBACK_SIZE])(void) =
 {	NULLPTR, NULLPTR,NULLPTR,NULLPTR };
 */

void UART2_voidInit() {
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

	/******** baud rate **********/
	UART2->USART_BRR = BAUDRATE2;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <UART2_voidInit+0x70>)
 8000bb6:	f240 3241 	movw	r2, #833	; 0x341
 8000bba:	609a      	str	r2, [r3, #8]

	/******** frame format *******/
//no parity
	CLR_BIT(UART2->USART_CR1, PCE);
 8000bbc:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <UART2_voidInit+0x70>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <UART2_voidInit+0x70>)
 8000bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bc6:	60d3      	str	r3, [r2, #12]
// 1 start 8bit data n stop
	CLR_BIT(UART2->USART_CR1, M);
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <UART2_voidInit+0x70>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <UART2_voidInit+0x70>)
 8000bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bd2:	60d3      	str	r3, [r2, #12]
// 1 stop bit
	CLR_BIT(UART2->USART_CR2, StOP_0);
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <UART2_voidInit+0x70>)
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	4a11      	ldr	r2, [pc, #68]	; (8000c20 <UART2_voidInit+0x70>)
 8000bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bde:	6113      	str	r3, [r2, #16]
	CLR_BIT(UART2->USART_CR2, StOP_1);
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <UART2_voidInit+0x70>)
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <UART2_voidInit+0x70>)
 8000be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bea:	6113      	str	r3, [r2, #16]

	/******** enable RX **********/
	SET_BIT(UART2->USART_CR1, RE);
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <UART2_voidInit+0x70>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <UART2_voidInit+0x70>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	60d3      	str	r3, [r2, #12]
	/******** enable TX **********/
	SET_BIT(UART2->USART_CR1, TE);
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <UART2_voidInit+0x70>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <UART2_voidInit+0x70>)
 8000bfe:	f043 0308 	orr.w	r3, r3, #8
 8000c02:	60d3      	str	r3, [r2, #12]
	/*********UART enable ********/
	SET_BIT(UART2->USART_CR1, UE);
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <UART2_voidInit+0x70>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <UART2_voidInit+0x70>)
 8000c0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c0e:	60d3      	str	r3, [r2, #12]
	// clr status reg
	UART2->USART_SR = 0;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <UART2_voidInit+0x70>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40004400 	.word	0x40004400

08000c24 <UART2_u8SendByteBusyw8>:

Error_t UART2_u8SendByteBusyw8(u8 data) {
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	Error_t local_u8Status = OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
	while (!READ_BIT(UART2->USART_SR, TXE))
 8000c32:	bf00      	nop
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <UART2_u8SendByteBusyw8+0x3c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	09db      	lsrs	r3, r3, #7
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f8      	beq.n	8000c34 <UART2_u8SendByteBusyw8+0x10>
		; // txe ---- time out is needed
	UART2->USART_DR = data;
 8000c42:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <UART2_u8SendByteBusyw8+0x3c>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	6053      	str	r3, [r2, #4]
	CLR_BIT(UART2->USART_SR, TXE);
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <UART2_u8SendByteBusyw8+0x3c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <UART2_u8SendByteBusyw8+0x3c>)
 8000c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c52:	6013      	str	r3, [r2, #0]
	return local_u8Status;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40004400 	.word	0x40004400

08000c64 <USART2_IRQHandler>:
	Error_t local_u8Status = OK;

	return local_u8Status;
}

void USART2_IRQHandler(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	 } else {
	 // do nothing
	 }
	 }
	 */
	if (READ_BIT(UART2->USART_SR, RXNE)) {
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <USART2_IRQHandler+0x30>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	095b      	lsrs	r3, r3, #5
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00c      	beq.n	8000c90 <USART2_IRQHandler+0x2c>
		if (GlobalRX_UART2) {
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <USART2_IRQHandler+0x34>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <USART2_IRQHandler+0x20>
			GlobalRX_UART2();
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <USART2_IRQHandler+0x34>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4798      	blx	r3

		}
		CLR_BIT(UART2->USART_SR, RXNE);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <USART2_IRQHandler+0x30>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a02      	ldr	r2, [pc, #8]	; (8000c94 <USART2_IRQHandler+0x30>)
 8000c8a:	f023 0320 	bic.w	r3, r3, #32
 8000c8e:	6013      	str	r3, [r2, #0]

	}

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40004400 	.word	0x40004400
 8000c98:	2000002c 	.word	0x2000002c

08000c9c <main>:
/*sw              : Communicatin OVER CAN                                    */
/*****************************************************************************/
#include "STD_TYPES.h"
#include "CmmunicationOverCAN_INTRF.h"

int main() {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	CommApp_voidInit();
 8000ca0:	f7ff fa66 	bl	8000170 <CommApp_voidInit>

	while (1) {
		CommApp_voidRunnable();
 8000ca4:	f7ff fa9a 	bl	80001dc <CommApp_voidRunnable>
 8000ca8:	e7fc      	b.n	8000ca4 <main+0x8>
	...

08000cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cda:	f000 f811 	bl	8000d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cde:	f7ff ffdd 	bl	8000c9c <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   r0, =_estack
 8000ce4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000cf0:	08000dc8 	.word	0x08000dc8
  ldr r2, =_sbss
 8000cf4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000cf8:	20000030 	.word	0x20000030

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <__libc_init_array>:
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	2600      	movs	r6, #0
 8000d04:	4d0c      	ldr	r5, [pc, #48]	; (8000d38 <__libc_init_array+0x38>)
 8000d06:	4c0d      	ldr	r4, [pc, #52]	; (8000d3c <__libc_init_array+0x3c>)
 8000d08:	1b64      	subs	r4, r4, r5
 8000d0a:	10a4      	asrs	r4, r4, #2
 8000d0c:	42a6      	cmp	r6, r4
 8000d0e:	d109      	bne.n	8000d24 <__libc_init_array+0x24>
 8000d10:	f000 f81a 	bl	8000d48 <_init>
 8000d14:	2600      	movs	r6, #0
 8000d16:	4d0a      	ldr	r5, [pc, #40]	; (8000d40 <__libc_init_array+0x40>)
 8000d18:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <__libc_init_array+0x44>)
 8000d1a:	1b64      	subs	r4, r4, r5
 8000d1c:	10a4      	asrs	r4, r4, #2
 8000d1e:	42a6      	cmp	r6, r4
 8000d20:	d105      	bne.n	8000d2e <__libc_init_array+0x2e>
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d28:	4798      	blx	r3
 8000d2a:	3601      	adds	r6, #1
 8000d2c:	e7ee      	b.n	8000d0c <__libc_init_array+0xc>
 8000d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d32:	4798      	blx	r3
 8000d34:	3601      	adds	r6, #1
 8000d36:	e7f2      	b.n	8000d1e <__libc_init_array+0x1e>
 8000d38:	08000dc0 	.word	0x08000dc0
 8000d3c:	08000dc0 	.word	0x08000dc0
 8000d40:	08000dc0 	.word	0x08000dc0
 8000d44:	08000dc4 	.word	0x08000dc4

08000d48 <_init>:
 8000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4a:	bf00      	nop
 8000d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4e:	bc08      	pop	{r3}
 8000d50:	469e      	mov	lr, r3
 8000d52:	4770      	bx	lr

08000d54 <_fini>:
 8000d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d56:	bf00      	nop
 8000d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5a:	bc08      	pop	{r3}
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	4770      	bx	lr
